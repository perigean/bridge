import { Viewport } from "./viewport.js";
const c = document.getElementById("canvas");
if (c === null) {
    throw new Error("No canvas element");
}
const ctx = c.getContext("2d");
if (ctx === null) {
    throw new Error("No 2d context");
}
const vp = new Viewport(ctx, () => {
    ctx.fillStyle = "black";
    ctx.fillRect(-16, -16, 32, 32);
});
window.addEventListener("resize", vp.resize);
export class ViewportTouch {
    constructor(_vp, _clip) {
    }
}
;
const points = new Map();
function touchStart(evt) {
    evt.preventDefault();
    console.log("touchstart");
    for (const t of evt.touches) {
        if (!points.has(t.identifier)) {
            points.set(t.identifier, { start: [t.clientX, t.clientY], move: [t.clientX, t.clientY] });
        }
    }
}
function touchEnd(evt) {
    evt.preventDefault();
    const removed = new Set(points.keys());
    for (const t of evt.touches) {
        removed.delete(t.identifier);
    }
    for (const i of removed) {
        const t = points.get(i);
        if (!t) {
            throw new Error("missing point with id " + i);
        }
        const d = [t.move[0] - t.start[0], t.move[1] - t.start[1]];
        console.log("touch " + i + " moved " + Math.sqrt(d[0] * d[0] + d[1] * d[1]));
        points.delete(i);
    }
}
;
function touchMove(evt) {
    evt.preventDefault();
    for (const t of evt.touches) {
        const p = points.get(t.identifier);
        if (!p) {
            throw new Error("missing point with id " + t.identifier);
        }
        p.move[0] = t.clientX;
        p.move[1] = t.clientY;
    }
}
c.addEventListener("touchstart", touchStart, false);
c.addEventListener("touchend", touchEnd, false);
c.addEventListener("touchcancel", touchEnd, false);
c.addEventListener("touchmove", touchMove, false);
console.log("stuff loaded");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQW9CLE1BQU0sZUFBZSxDQUFBO0FBRzFELE1BQU0sQ0FBQyxHQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0FBQ25FLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztDQUN4QztBQUNELE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNwQztBQUNELE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7SUFDOUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7SUFDeEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQWM3QyxNQUFNLE9BQU8sYUFBYTtJQUN0QixZQUFZLEdBQWEsRUFBRSxLQUFtQjtJQUU5QyxDQUFDO0NBQ0o7QUFBQSxDQUFDO0FBRUYsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTJDLENBQUM7QUFFbEUsU0FBUyxVQUFVLENBQUMsR0FBZTtJQUMvQixHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQixLQUFLLE1BQU0sQ0FBQyxJQUFJ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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld3BvcnQsIFZpZXdwb3J0UG9zaXRpb24gfSBmcm9tIFwiLi92aWV3cG9ydC5qc1wiXG5pbXBvcnQgeyBQb2ludDJEIH0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCJcblxuY29uc3QgYyA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudCk7XG5pZiAoYyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNhbnZhcyBlbGVtZW50XCIpO1xufVxuY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KFwiMmRcIik7XG5pZiAoY3R4ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gMmQgY29udGV4dFwiKTtcbn1cbmNvbnN0IHZwID0gbmV3IFZpZXdwb3J0KGN0eCwgKCkgPT4ge1xuICAgIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgY3R4LmZpbGxSZWN0KC0xNiwgLTE2LCAzMiwgMzIpO1xufSk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHZwLnJlc2l6ZSk7XG5cbi8vIFRvdWNoIGhhbmRsaW5nXG5cbi8vIEluIHNjcmVlbiBzcGFjZVxuLy8gKiBub3JtYWxpemUgdG91Y2hlcyBzbyB0aGF0IGNhbmNlbGVkIHRvdWNoZXMgYXJlIGNvbnRpbnVlZFxuLy8gKiBkZXRlY3QgaWYgYSB0b3VjaCBpcyBhIHRhcCBvciBhIHBhblxuLy8gKiBwcm9jZXNzIHRhcHNcbi8vICogYWxsIHBhbnMgZ2V0IHB1dCBpbnRvIGEgc2luZ2xlIHBhbiB0cmFja2VyXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpcFBvc2l0aW9uIHtcbiAgICAocG9zOiBWaWV3cG9ydFBvc2l0aW9uKTogVmlld3BvcnRQb3NpdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0VG91Y2gge1xuICAgIGNvbnN0cnVjdG9yKF92cDogVmlld3BvcnQsIF9jbGlwOiBDbGlwUG9zaXRpb24pIHtcbiAgICAgICAgXG4gICAgfVxufTtcblxuY29uc3QgcG9pbnRzID0gbmV3IE1hcDxudW1iZXIsIHtzdGFydDogUG9pbnQyRCwgbW92ZTogUG9pbnQyRH0+KCk7XG5cbmZ1bmN0aW9uIHRvdWNoU3RhcnQoZXZ0OiBUb3VjaEV2ZW50KSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc29sZS5sb2coXCJ0b3VjaHN0YXJ0XCIpO1xuICAgIGZvciAoY29uc3QgdCBvZiBldnQudG91Y2hlcykge1xuICAgICAgICBpZiAoIXBvaW50cy5oYXModC5pZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgcG9pbnRzLnNldCh0LmlkZW50aWZpZXIsIHtzdGFydDogW3QuY2xpZW50WCwgdC5jbGllbnRZXSwgbW92ZTogW3QuY2xpZW50WCwgdC5jbGllbnRZXX0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b3VjaEVuZChldnQ6IFRvdWNoRXZlbnQpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICBjb25zdCByZW1vdmVkID0gbmV3IFNldDxudW1iZXI+KHBvaW50cy5rZXlzKCkpO1xuICAgIGZvciAoY29uc3QgdCBvZiBldnQudG91Y2hlcykge1xuICAgICAgICByZW1vdmVkLmRlbGV0ZSh0LmlkZW50aWZpZXIpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGkgb2YgcmVtb3ZlZCkge1xuICAgICAgICBjb25zdCB0ID0gcG9pbnRzLmdldChpKTtcbiAgICAgICAgaWYgKCF0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIHBvaW50IHdpdGggaWQgXCIgKyBpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkID0gW3QubW92ZVswXSAtIHQuc3RhcnRbMF0sIHQubW92ZVsxXSAtIHQuc3RhcnRbMV1dO1xuICAgICAgICBjb25zb2xlLmxvZyhcInRvdWNoIFwiICsgaSArIFwiIG1vdmVkIFwiICsgTWF0aC5zcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0pKTtcbiAgICAgICAgcG9pbnRzLmRlbGV0ZShpKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiB0b3VjaE1vdmUoZXZ0OiBUb3VjaEV2ZW50KSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZm9yIChjb25zdCB0IG9mIGV2dC50b3VjaGVzKSB7XG4gICAgICAgIGNvbnN0IHAgPSBwb2ludHMuZ2V0KHQuaWRlbnRpZmllcik7XG4gICAgICAgIGlmICghcCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBwb2ludCB3aXRoIGlkIFwiICsgdC5pZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICBwLm1vdmVbMF0gPSB0LmNsaWVudFg7XG4gICAgICAgIHAubW92ZVsxXSA9IHQuY2xpZW50WTtcbiAgICB9XG59XG5cbmMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdG91Y2hTdGFydCwgZmFsc2UpO1xuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdG91Y2hFbmQsIGZhbHNlKTtcbmMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIHRvdWNoRW5kLCBmYWxzZSk7XG5jLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdG91Y2hNb3ZlLCBmYWxzZSk7XG5jb25zb2xlLmxvZyhcInN0dWZmIGxvYWRlZFwiKTsiXX0=