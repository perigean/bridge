const c = document.getElementById("canvas");
if (c === null) {
    throw "where did the canvas go?";
}
const ctx = c.getContext("2d");
if (ctx === null) {
    throw "not supported";
}
function resize() {
    c.width = c.offsetWidth;
    c.height = c.offsetHeight;
}
document.addEventListener("resize", resize);
resize();
ctx.strokeStyle = "black";
ctx.lineWidth = 2;
// previous positions of touches
let touches = new Map();
let drawToken = null;
function redraw(_) {
    drawToken = null;
    if (ctx === null) {
        throw new Error("I don't understand typescript");
    }
    ctx.clearRect(0, 0, c.width, c.height);
    for (const [, ts] of touches) {
        for (const t of ts) {
            ctx.beginPath();
            ctx.ellipse(t[0], t[1], 32, 32, 0, 0, Math.PI * 2);
            ctx.stroke();
        }
        ctx.beginPath();
        ctx.moveTo(ts[0][0], ts[0][1]);
        for (let i = 1; i < ts.length; i++) {
            const t = ts[i];
            ctx.lineTo(t[0], t[1]);
        }
        ctx.stroke();
    }
}
function requestRedraw() {
    if (drawToken === null) {
        drawToken = requestAnimationFrame(redraw);
    }
}
function touchStart(evt) {
    evt.preventDefault();
    for (const t of evt.touches) {
        touches.set(t.identifier, [[t.pageX, t.pageY]]);
    }
    requestRedraw();
}
function touchEnd(evt) {
    evt.preventDefault();
    const newTouches = new Map();
    for (const t of evt.touches) {
        const ts = touches.get(t.identifier);
        if (ts === undefined) {
            throw new Error("Touch moved but not tracked");
        }
        newTouches.set(t.identifier, ts);
    }
    touches = newTouches;
    requestRedraw();
}
function touchMove(evt) {
    evt.preventDefault();
    for (const t of evt.touches) {
        const ts = touches.get(t.identifier);
        if (ts === undefined) {
            throw new Error("Touch moved but not tracked");
        }
        ts.push([t.pageX, t.pageY]);
    }
    requestRedraw();
}
c.addEventListener("touchstart", touchStart, false);
c.addEventListener("touchend", touchEnd, false);
c.addEventListener("touchcancel", touchEnd, false);
c.addEventListener("touchmove", touchMove, false);
console.log("stuff loaded");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sQ0FBQyxHQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0FBQ25FLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNaLE1BQU0sMEJBQTBCLENBQUM7Q0FDcEM7QUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtJQUNkLE1BQU0sZUFBZSxDQUFDO0NBQ3pCO0FBRUQsU0FBUyxNQUFNO0lBQ1gsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUM5QixDQUFDO0FBQ0QsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM1QyxNQUFNLEVBQUUsQ0FBQztBQUVULEdBQUcsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQzFCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBS2xCLGdDQUFnQztBQUNoQyxJQUFJLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztBQUVoRCxJQUFJLFNBQVMsR0FBa0IsSUFBSSxDQUFDO0FBQ3BDLFNBQVMsTUFBTSxDQUFDLENBQVM7SUFDckIsU0FBUyxHQUFHLElBQUksQ0FBQztJQUVqQixJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7S0FDcEQ7SUFDRCxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkMs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L0I7SUFDRCxhQUFhLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBRUQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgYyA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudCk7XG5pZiAoYyA9PT0gbnVsbCkge1xuICAgIHRocm93IFwid2hlcmUgZGlkIHRoZSBjYW52YXMgZ28/XCI7XG59XG5cbmNvbnN0IGN0eCA9IGMuZ2V0Q29udGV4dChcIjJkXCIpO1xuaWYgKGN0eCA9PT0gbnVsbCkge1xuICAgIHRocm93IFwibm90IHN1cHBvcnRlZFwiO1xufVxuXG5mdW5jdGlvbiByZXNpemUoKSB7XG4gICAgYy53aWR0aCA9IGMub2Zmc2V0V2lkdGg7XG4gICAgYy5oZWlnaHQgPSBjLm9mZnNldEhlaWdodDtcbn1cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplKTtcbnJlc2l6ZSgpO1xuXG5jdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG5jdHgubGluZVdpZHRoID0gMjtcblxuXG5pbXBvcnQgeyBQb2ludDJEIH0gZnJvbSBcIi4vdHJhbnNmb3JtXCJcblxuLy8gcHJldmlvdXMgcG9zaXRpb25zIG9mIHRvdWNoZXNcbmxldCB0b3VjaGVzID0gbmV3IE1hcDxudW1iZXIsIEFycmF5PFBvaW50MkQ+PigpO1xuXG5sZXQgZHJhd1Rva2VuOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbmZ1bmN0aW9uIHJlZHJhdyhfOiBudW1iZXIpIHtcbiAgICBkcmF3VG9rZW4gPSBudWxsO1xuXG4gICAgaWYgKGN0eCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJIGRvbid0IHVuZGVyc3RhbmQgdHlwZXNjcmlwdFwiKTtcbiAgICB9XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7XG4gICAgZm9yIChjb25zdCBbLCB0c10gb2YgdG91Y2hlcykge1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdHMpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5lbGxpcHNlKHRbMF0sIHRbMV0sIDMyLCAzMiwgMCwgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh0c1swXVswXSwgdHNbMF1bMV0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdHNbaV07XG4gICAgICAgICAgICBjdHgubGluZVRvKHRbMF0sIHRbMV0pO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RSZWRyYXcoKSB7XG4gICAgaWYgKGRyYXdUb2tlbiA9PT0gbnVsbCkge1xuICAgICAgICBkcmF3VG9rZW4gPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVkcmF3KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvdWNoU3RhcnQoZXZ0OiBUb3VjaEV2ZW50KSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZm9yIChjb25zdCB0IG9mIGV2dC50b3VjaGVzKSB7XG4gICAgICAgIHRvdWNoZXMuc2V0KHQuaWRlbnRpZmllciwgW1t0LnBhZ2VYLCB0LnBhZ2VZXV0pO1xuICAgIH1cbiAgICByZXF1ZXN0UmVkcmF3KCk7XG59XG5cbmZ1bmN0aW9uIHRvdWNoRW5kKGV2dDogVG91Y2hFdmVudCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IG5ld1RvdWNoZXMgPSBuZXcgTWFwPG51bWJlciwgQXJyYXk8UG9pbnQyRD4+KCk7XG4gICAgZm9yIChjb25zdCB0IG9mIGV2dC50b3VjaGVzKSB7XG4gICAgICAgIGNvbnN0IHRzID0gdG91Y2hlcy5nZXQodC5pZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvdWNoIG1vdmVkIGJ1dCBub3QgdHJhY2tlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdUb3VjaGVzLnNldCh0LmlkZW50aWZpZXIsIHRzKTtcbiAgICB9XG4gICAgdG91Y2hlcyA9IG5ld1RvdWNoZXM7XG4gICAgcmVxdWVzdFJlZHJhdygpO1xufVxuXG5cbmZ1bmN0aW9uIHRvdWNoTW92ZShldnQ6IFRvdWNoRXZlbnQpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgZXZ0LnRvdWNoZXMpIHtcbiAgICAgICAgY29uc3QgdHMgPSB0b3VjaGVzLmdldCh0LmlkZW50aWZpZXIpO1xuICAgICAgICBpZiAodHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG91Y2ggbW92ZWQgYnV0IG5vdCB0cmFja2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRzLnB1c2goW3QucGFnZVgsIHQucGFnZVldKTtcbiAgICB9XG4gICAgcmVxdWVzdFJlZHJhdygpO1xufVxuICAgIFxuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0b3VjaFN0YXJ0LCBmYWxzZSk7XG5jLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0b3VjaEVuZCwgZmFsc2UpO1xuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgdG91Y2hFbmQsIGZhbHNlKTtcbmMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0b3VjaE1vdmUsIGZhbHNlKTtcbmNvbnNvbGUubG9nKFwic3R1ZmYgbG9hZGVkXCIpOyJdfQ==