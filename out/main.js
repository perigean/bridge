import { Viewport } from "./viewport.js";
//import { Point2D } from "./transform.js"
const c = document.getElementById("canvas");
if (c === null) {
    throw new Error("No canvas element");
}
const ctx = c.getContext("2d");
if (ctx === null) {
    throw new Error("No 2d context");
}
const vp = new Viewport(ctx, () => {
    ctx.fillStyle = "black";
    ctx.fillRect(-16, -16, 32, 32);
});
window.addEventListener("resize", vp.resize);
export class ViewportTouch {
    constructor(_vp, _clip) {
    }
}
;
function touchStart(evt) {
    evt.preventDefault();
    console.log("touchstart");
    for (const t of evt.touches) {
        console.log("    " + t.clientX + ", " + t.clientY);
    }
}
function touchEndGenerator(name) {
    return function touchEnd(evt) {
        evt.preventDefault();
        console.log(name);
        for (const t of evt.touches) {
            console.log("    " + t.clientX + ", " + t.clientY);
        }
    };
}
c.addEventListener("touchstart", touchStart, false);
c.addEventListener("touchend", touchEndGenerator("touchend"), false);
c.addEventListener("touchcancel", touchEndGenerator("touchcancel"), false);
//.addEventListener("touchmove", touchMove, false);
console.log("stuff loaded");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQW9CLE1BQU0sZUFBZSxDQUFBO0FBQzFELDBDQUEwQztBQUUxQyxNQUFNLENBQUMsR0FBSSxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBdUIsQ0FBQztBQUNuRSxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDWixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Q0FDeEM7QUFDRCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtJQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDcEM7QUFDRCxNQUFNLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO0lBQzlCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBQ3hCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFjN0MsTUFBTSxPQUFPLGFBQWE7SUFDdEIsWUFBWSxHQUFhLEVBQUUsS0FBbUI7SUFFOUMsQ0FBQztDQUNKO0FBQUEsQ0FBQztBQUVGLFNBQVMsVUFBVSxDQUFDLEdBQWU7SUFDL0IsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUIsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0RDtBQUNMLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLElBQVk7SUFDbkMsT0FBTyxTQUFTLFFBQVEsQ0FBQyxHQUFlO1FBQ3BDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEQ7SUFDTCxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNFLG1EQUFtRDtBQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld3BvcnQsIFZpZXdwb3J0UG9zaXRpb24gfSBmcm9tIFwiLi92aWV3cG9ydC5qc1wiXG4vL2ltcG9ydCB7IFBvaW50MkQgfSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIlxuXG5jb25zdCBjID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50KTtcbmlmIChjID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2FudmFzIGVsZW1lbnRcIik7XG59XG5jb25zdCBjdHggPSBjLmdldENvbnRleHQoXCIyZFwiKTtcbmlmIChjdHggPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyAyZCBjb250ZXh0XCIpO1xufVxuY29uc3QgdnAgPSBuZXcgVmlld3BvcnQoY3R4LCAoKSA9PiB7XG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICBjdHguZmlsbFJlY3QoLTE2LCAtMTYsIDMyLCAzMik7XG59KTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdnAucmVzaXplKTtcblxuLy8gVG91Y2ggaGFuZGxpbmdcblxuLy8gSW4gc2NyZWVuIHNwYWNlXG4vLyAqIG5vcm1hbGl6ZSB0b3VjaGVzIHNvIHRoYXQgY2FuY2VsZWQgdG91Y2hlcyBhcmUgY29udGludWVkXG4vLyAqIGRldGVjdCBpZiBhIHRvdWNoIGlzIGEgdGFwIG9yIGEgcGFuXG4vLyAqIHByb2Nlc3MgdGFwc1xuLy8gKiBhbGwgcGFucyBnZXQgcHV0IGludG8gYSBzaW5nbGUgcGFuIHRyYWNrZXJcblxuZXhwb3J0IGludGVyZmFjZSBDbGlwUG9zaXRpb24ge1xuICAgIChwb3M6IFZpZXdwb3J0UG9zaXRpb24pOiBWaWV3cG9ydFBvc2l0aW9uO1xufVxuXG5leHBvcnQgY2xhc3MgVmlld3BvcnRUb3VjaCB7XG4gICAgY29uc3RydWN0b3IoX3ZwOiBWaWV3cG9ydCwgX2NsaXA6IENsaXBQb3NpdGlvbikge1xuICAgICAgICBcbiAgICB9XG59O1xuXG5mdW5jdGlvbiB0b3VjaFN0YXJ0KGV2dDogVG91Y2hFdmVudCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnNvbGUubG9nKFwidG91Y2hzdGFydFwiKTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgZXZ0LnRvdWNoZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgICAgXCIgKyB0LmNsaWVudFggKyBcIiwgXCIgKyB0LmNsaWVudFkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG91Y2hFbmRHZW5lcmF0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRvdWNoRW5kKGV2dDogVG91Y2hFdmVudCkge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc29sZS5sb2cobmFtZSk7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBldnQudG91Y2hlcykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgICAgXCIgKyB0LmNsaWVudFggKyBcIiwgXCIgKyB0LmNsaWVudFkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiAgICBcbmMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdG91Y2hTdGFydCwgZmFsc2UpO1xuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdG91Y2hFbmRHZW5lcmF0b3IoXCJ0b3VjaGVuZFwiKSwgZmFsc2UpO1xuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgdG91Y2hFbmRHZW5lcmF0b3IoXCJ0b3VjaGNhbmNlbFwiKSwgZmFsc2UpO1xuLy8uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0b3VjaE1vdmUsIGZhbHNlKTtcbmNvbnNvbGUubG9nKFwic3R1ZmYgbG9hZGVkXCIpOyJdfQ==