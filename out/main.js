const c = document.getElementById("canvas");
if (c === null) {
    throw "where did the canvas go?";
}
const ctx = c.getContext("2d");
if (ctx === null) {
    throw "not supported";
}
ctx.strokeStyle = "black";
ctx.lineWidth = 2;
// previous positions of touches
const touches = new Map();
function redraw(_) {
    if (ctx === null) {
        throw new Error("I don't understand typescript");
    }
    ctx.clearRect(0, 0, c.width, c.height);
    for (const [, ts] of touches) {
        for (const t of ts) {
            ctx.beginPath();
            ctx.ellipse(t[0], t[1], 32, 32, 0, 0, Math.PI * 2);
            ctx.stroke();
        }
        ctx.beginPath();
        ctx.moveTo(ts[0][0], ts[0][1]);
        for (let i = 1; i < ts.length; i++) {
            const t = ts[i];
            ctx.lineTo(t[0], t[1]);
        }
        ctx.stroke();
    }
}
let drawToken = null;
function requestRedraw() {
    if (drawToken === null) {
        drawToken = requestAnimationFrame(redraw);
    }
}
function touchStart(evt) {
    evt.preventDefault();
    for (const t of evt.touches) {
        touches.set(t.identifier, [[t.pageX, t.pageY]]);
    }
    requestRedraw();
}
function touchEnd(evt) {
    evt.preventDefault();
    for (const t of evt.touches) {
        touches.delete(t.identifier);
    }
    requestRedraw();
}
function touchMove(evt) {
    evt.preventDefault();
    for (const t of evt.touches) {
        const ts = touches.get(t.identifier);
        if (ts === undefined) {
            throw new Error("Touch moved but not tracked");
        }
        ts.push([t.pageX, t.pageY]);
    }
    requestRedraw();
}
c.addEventListener("touchstart", touchStart, false);
c.addEventListener("touchend", touchEnd, false);
c.addEventListener("touchcancel", touchEnd, false);
c.addEventListener("touchmove", touchMove, false);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sQ0FBQyxHQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0FBQ25FLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNaLE1BQU0sMEJBQTBCLENBQUM7Q0FDcEM7QUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtJQUNkLE1BQU0sZUFBZSxDQUFDO0NBQ3pCO0FBRUQsR0FBRyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7QUFDMUIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFLbEIsZ0NBQWdDO0FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO0FBRWxELFNBQVMsTUFBTSxDQUFDLENBQVM7SUFDckIsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLEtBQUssTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFO1FBQzFCLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2hCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkQsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2hCO1FBQ0QsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxQjtRQUNELEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNoQjtBQUNMLENBQUM7QUFFRCxJQUFJLFNBQVMsR0FBa0IsSUFBSSxDQUFDO0FBQ3BDLFNBQVMsYUFBYTtJQUNsQixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsU0FBUyxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzdDO0FBQ0wsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEdBQWU7SUFDL0IsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRTtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuRDtJQUNELGFBQWEsRUFBRSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFlO0lBQzdCLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDekIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDaEM7SUFDRCxhQUFhLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBR0QsU0FBUyxTQUFTLENBQUMsR0FBZTtJQUM5QixHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDckIsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFO1FBQ3pCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDbEQ7UUFDRCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUMvQjtJQUNELGFBQWEsRUFBRSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwRCxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuRCxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgYyA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudCk7XG5pZiAoYyA9PT0gbnVsbCkge1xuICAgIHRocm93IFwid2hlcmUgZGlkIHRoZSBjYW52YXMgZ28/XCI7XG59XG5cbmNvbnN0IGN0eCA9IGMuZ2V0Q29udGV4dChcIjJkXCIpO1xuaWYgKGN0eCA9PT0gbnVsbCkge1xuICAgIHRocm93IFwibm90IHN1cHBvcnRlZFwiO1xufVxuXG5jdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG5jdHgubGluZVdpZHRoID0gMjtcblxuXG5pbXBvcnQgeyBQb2ludDJEIH0gZnJvbSBcIi4vdHJhbnNmb3JtXCJcblxuLy8gcHJldmlvdXMgcG9zaXRpb25zIG9mIHRvdWNoZXNcbmNvbnN0IHRvdWNoZXMgPSBuZXcgTWFwPG51bWJlciwgQXJyYXk8UG9pbnQyRD4+KCk7XG5cbmZ1bmN0aW9uIHJlZHJhdyhfOiBudW1iZXIpIHtcbiAgICBpZiAoY3R4ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkkgZG9uJ3QgdW5kZXJzdGFuZCB0eXBlc2NyaXB0XCIpO1xuICAgIH1cbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGMud2lkdGgsIGMuaGVpZ2h0KTtcbiAgICBmb3IgKGNvbnN0IFssIHRzXSBvZiB0b3VjaGVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0cykge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LmVsbGlwc2UodFswXSwgdFsxXSwgMzIsIDMyLCAwLCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRzWzBdWzBdLCB0c1swXVsxXSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0c1tpXTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8odFswXSwgdFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cblxubGV0IGRyYXdUb2tlbjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5mdW5jdGlvbiByZXF1ZXN0UmVkcmF3KCkge1xuICAgIGlmIChkcmF3VG9rZW4gPT09IG51bGwpIHtcbiAgICAgICAgZHJhd1Rva2VuID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlZHJhdyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b3VjaFN0YXJ0KGV2dDogVG91Y2hFdmVudCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGZvciAoY29uc3QgdCBvZiBldnQudG91Y2hlcykge1xuICAgICAgICB0b3VjaGVzLnNldCh0LmlkZW50aWZpZXIsIFtbdC5wYWdlWCwgdC5wYWdlWV1dKTtcbiAgICB9XG4gICAgcmVxdWVzdFJlZHJhdygpO1xufVxuXG5mdW5jdGlvbiB0b3VjaEVuZChldnQ6IFRvdWNoRXZlbnQpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgZXZ0LnRvdWNoZXMpIHtcbiAgICAgICAgdG91Y2hlcy5kZWxldGUodC5pZGVudGlmaWVyKTtcbiAgICB9XG4gICAgcmVxdWVzdFJlZHJhdygpO1xufVxuXG5cbmZ1bmN0aW9uIHRvdWNoTW92ZShldnQ6IFRvdWNoRXZlbnQpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgZXZ0LnRvdWNoZXMpIHtcbiAgICAgICAgY29uc3QgdHMgPSB0b3VjaGVzLmdldCh0LmlkZW50aWZpZXIpO1xuICAgICAgICBpZiAodHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG91Y2ggbW92ZWQgYnV0IG5vdCB0cmFja2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRzLnB1c2goW3QucGFnZVgsIHQucGFnZVldKTtcbiAgICB9XG4gICAgcmVxdWVzdFJlZHJhdygpO1xufVxuICAgIFxuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0b3VjaFN0YXJ0LCBmYWxzZSk7XG5jLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0b3VjaEVuZCwgZmFsc2UpO1xuYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgdG91Y2hFbmQsIGZhbHNlKTtcbmMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0b3VjaE1vdmUsIGZhbHNlKTtcbiJdfQ==