// Copyright Charles Dueck 2020
import { resizeFloat32Array } from "./ode.js";
function addWithScale(x, s, y, out) {
    const n = x.length;
    for (let i = 0; i < n; i++) {
        out[i] = x[i] + s * y[i];
    }
    return out;
}
export class RungeKutta4 {
    constructor(y, derivative) {
        this.t = 0;
        this.y = y;
        this.k1 = new Float32Array(y.length);
        this.k2 = new Float32Array(y.length);
        this.k3 = new Float32Array(y.length);
        this.k4 = new Float32Array(y.length);
        this.scratch = new Float32Array(y.length);
        this.derivative = derivative;
    }
    next(h) {
        const t = this.t;
        const y = this.y;
        const k1 = this.k1;
        const k2 = this.k2;
        const k3 = this.k3;
        const k4 = this.k4;
        const scratch = this.scratch;
        const derivative = this.derivative;
        derivative(t, y, k1);
        derivative(t + 0.5 * h, addWithScale(y, 0.5 * h, k1, scratch), k2);
        derivative(t + 0.5 * h, addWithScale(y, 0.5 * h, k2, scratch), k3);
        derivative(t + h, addWithScale(y, h, k3, scratch), k4);
        const n = y.length;
        for (let i = 0; i < n; i++) {
            y[i] += h * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i]) / 6.0;
        }
        this.t += h;
    }
    save() {
        return new Float32Array(this.y);
    }
    resize(length) {
        this.y = resizeFloat32Array(this.y, length);
        this.k1 = resizeFloat32Array(this.k1, length);
        this.k2 = resizeFloat32Array(this.k2, length);
        this.k3 = resizeFloat32Array(this.k3, length);
        this.k4 = resizeFloat32Array(this.k4, length);
        this.scratch = resizeFloat32Array(this.scratch, length);
    }
    restore(t, y) {
        this.t = t;
        this.resize(y.length);
        this.y.set(y);
    }
    add(...ys) {
        const length = this.y.length;
        this.resize(length + ys.length);
        this.y.set(ys, length);
    }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicms0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JrNC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFFL0IsT0FBTyxFQUFjLGtCQUFrQixFQUFvQixNQUFNLFVBQVUsQ0FBQztBQUU1RSxTQUFTLFlBQVksQ0FBQyxDQUFlLEVBQUUsQ0FBUyxFQUFFLENBQWUsRUFBRSxHQUFpQjtJQUNoRixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDeEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzVCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBT0QsTUFBTSxPQUFPLFdBQVc7SUFVcEIsWUFBWSxDQUFlLEVBQUUsVUFBc0I7UUFDL0MsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFD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QUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQUcsRUFBWTtRQUNmLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBDaGFybGVzIER1ZWNrIDIwMjBcblxuaW1wb3J0IHsgRGVyaXZhdGl2ZSwgcmVzaXplRmxvYXQzMkFycmF5LCBEeW5hbWljT0RFTWV0aG9kIH0gZnJvbSBcIi4vb2RlLmpzXCI7XG5cbmZ1bmN0aW9uIGFkZFdpdGhTY2FsZSh4OiBGbG9hdDMyQXJyYXksIHM6IG51bWJlciwgeTogRmxvYXQzMkFycmF5LCBvdXQ6IEZsb2F0MzJBcnJheSk6IEZsb2F0MzJBcnJheSB7XG4gICAgY29uc3QgbiA9IHgubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIG91dFtpXSA9IHhbaV0gKyBzICogeVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPREUge1xuICAgIHQ6IG51bWJlcjtcbiAgICB5OiBGbG9hdDMyQXJyYXk7XG59XG5cbmV4cG9ydCBjbGFzcyBSdW5nZUt1dHRhNCBpbXBsZW1lbnRzIER5bmFtaWNPREVNZXRob2Q8RmxvYXQzMkFycmF5PiB7XG4gICAgdDogbnVtYmVyO1xuICAgIHk6IEZsb2F0MzJBcnJheTtcbiAgICBwcml2YXRlIGsxOiBGbG9hdDMyQXJyYXk7XG4gICAgcHJpdmF0ZSBrMjogRmxvYXQzMkFycmF5O1xuICAgIHByaXZhdGUgazM6IEZsb2F0MzJBcnJheTtcbiAgICBwcml2YXRlIGs0OiBGbG9hdDMyQXJyYXk7XG4gICAgcHJpdmF0ZSBzY3JhdGNoOiBGbG9hdDMyQXJyYXk7XG4gICAgcHJpdmF0ZSBkZXJpdmF0aXZlOiBEZXJpdmF0aXZlO1xuXG4gICAgY29uc3RydWN0b3IoeTogRmxvYXQzMkFycmF5LCBkZXJpdmF0aXZlOiBEZXJpdmF0aXZlKSB7XG4gICAgICAgIHRoaXMudCA9IDA7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMuazEgPSBuZXcgRmxvYXQzMkFycmF5KHkubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5rMiA9IG5ldyBGbG9hdDMyQXJyYXkoeS5sZW5ndGgpO1xuICAgICAgICB0aGlzLmszID0gbmV3IEZsb2F0MzJBcnJheSh5Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMuazQgPSBuZXcgRmxvYXQzMkFycmF5KHkubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5zY3JhdGNoID0gbmV3IEZsb2F0MzJBcnJheSh5Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZGVyaXZhdGl2ZSA9IGRlcml2YXRpdmU7XG4gICAgfVxuXG4gICAgbmV4dChoOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMudDtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICAgICAgY29uc3QgazEgPSB0aGlzLmsxO1xuICAgICAgICBjb25zdCBrMiA9IHRoaXMuazI7XG4gICAgICAgIGNvbnN0IGszID0gdGhpcy5rMztcbiAgICAgICAgY29uc3QgazQgPSB0aGlzLms0O1xuICAgICAgICBjb25zdCBzY3JhdGNoID0gdGhpcy5zY3JhdGNoO1xuICAgICAgICBjb25zdCBkZXJpdmF0aXZlID0gdGhpcy5kZXJpdmF0aXZlO1xuICAgICAgICBkZXJpdmF0aXZlKHQsIHksIGsxKTtcbiAgICAgICAgZGVyaXZhdGl2ZSh0ICsgMC41ICogaCwgYWRkV2l0aFNjYWxlKHksIDAuNSAqIGgsIGsxLCBzY3JhdGNoKSwgazIpO1xuICAgICAgICBkZXJpdmF0aXZlKHQgKyAwLjUgKiBoLCBhZGRXaXRoU2NhbGUoeSwgMC41ICogaCwgazIsIHNjcmF0Y2gpLCBrMyk7XG4gICAgICAgIGRlcml2YXRpdmUodCArIGgsIGFkZFdpdGhTY2FsZSh5LCBoLCBrMywgc2NyYXRjaCksIGs0KTtcbiAgICAgICAgY29uc3QgbiA9IHkubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgeVtpXSArPSBoICogKGsxW2ldICsgMi4wICogazJbaV0gKyAyLjAgKiBrM1tpXSArIGs0W2ldKSAvIDYuMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnQgKz0gaDtcbiAgICB9XG5cbiAgICBzYXZlKCk6IEZsb2F0MzJBcnJheSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHRoaXMueSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNpemUobGVuZ3RoOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy55ID0gcmVzaXplRmxvYXQzMkFycmF5KHRoaXMueSwgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5rMSA9IHJlc2l6ZUZsb2F0MzJBcnJheSh0aGlzLmsxLCBsZW5ndGgpO1xuICAgICAgICB0aGlzLmsyID0gcmVzaXplRmxvYXQzMkFycmF5KHRoaXMuazIsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMuazMgPSByZXNpemVGbG9hdDMyQXJyYXkodGhpcy5rMywgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5rNCA9IHJlc2l6ZUZsb2F0MzJBcnJheSh0aGlzLms0LCBsZW5ndGgpO1xuICAgICAgICB0aGlzLnNjcmF0Y2ggPSByZXNpemVGbG9hdDMyQXJyYXkodGhpcy5zY3JhdGNoLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIHJlc3RvcmUodDogbnVtYmVyLCB5OiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50ID0gdDtcbiAgICAgICAgdGhpcy5yZXNpemUoeS5sZW5ndGgpO1xuICAgICAgICB0aGlzLnkuc2V0KHkpO1xuICAgIH1cblxuICAgIGFkZCguLi55czogbnVtYmVyW10pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy55Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5yZXNpemUobGVuZ3RoICsgeXMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy55LnNldCh5cywgbGVuZ3RoKTtcbiAgICB9XG59O1xuIl19