// Copyright Charles Dueck 2020
;
export class TouchDemux {
    constructor(element, handler) {
        this.element = element;
        this.handler = handler;
        this.active = new Map();
        this.start = (evt) => {
            evt.preventDefault();
            for (const touch of evt.touches) {
                if (!this.active.has(touch.identifier)) {
                    const start = [touch.clientX, touch.clientY];
                    const extra = this.handler.touchBegin(touch.identifier, start);
                    const tm = Object.assign({ id: touch.identifier, start: start, prev: start, curr: start }, extra);
                    this.active.set(touch.identifier, tm);
                }
            }
        };
        this.move = (evt) => {
            evt.preventDefault();
            let moved = false;
            for (const touch of evt.touches) {
                const tm = this.active.get(touch.identifier);
                if (tm === undefined) {
                    throw new Error("Touch moved without being started");
                }
                if (tm.curr[0] != touch.clientX || tm.curr[1] != touch.clientY) {
                    moved = true;
                    tm.prev = tm.curr;
                    tm.curr = [touch.clientX, touch.clientY];
                }
            }
            if (moved) {
                this.handler.touchMove([...this.active.values()]);
            }
        };
        this.end = (evt) => {
            evt.preventDefault();
            const removed = new Set(this.active.keys());
            for (const t of evt.touches) {
                removed.delete(t.identifier);
            }
            for (const id of removed) {
                this.active.delete(id);
                this.handler.touchEnd(id);
            }
        };
        this.element.addEventListener("touchstart", this.start, false);
        this.element.addEventListener("touchmove", this.move, false);
        this.element.addEventListener("touchend", this.end, false);
        this.element.addEventListener("touchcancel", this.end, false);
    }
    disconnect() {
        this.element.removeEventListener("touchstart", this.start, false);
        this.element.removeEventListener("touchmove", this.move, false);
        this.element.removeEventListener("touchend", this.end, false);
        this.element.removeEventListener("touchcancel", this.end, false);
    }
}
;
//# sourceMappingURL=data:application/json;base64,