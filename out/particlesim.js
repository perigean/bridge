// Copyright 2021 Charles Dueck
import { resizeFloat32Array } from "./ode.js";
export function getLength(y) {
    return y.length >> 2; // y.length / 4
}
export function getDx(y, i) {
    return y[i * 4];
}
export function getDy(y, i) {
    return y[i * 4 + 1];
}
export function getVx(y, i) {
    return y[i * 4 + 2];
}
export function getVy(y, i) {
    return y[i * 4 + 3];
}
export function applyForce(dydt, m, i, fx, fy) {
    if (fx === NaN || fy === NaN)
        throw new Error('NaN force');
    if (fx === Infinity || fy === Infinity)
        throw new Error('Infinity force');
    dydt[i * 4 + 2] += fx / m[i];
    dydt[i * 4 + 3] += fy / m[i];
    if (dydt[i * 4 + 2] === NaN || dydt[i * 4 + 2] === Infinity || dydt[i * 4 + 3] === NaN || dydt[i * 4 + 3] === Infinity)
        throw new Error('bad dydt');
    if (Math.abs(dydt[i * 4 + 2]) > 1000000000 || Math.abs(dydt[i * 4 + 3]) > 1000000000) {
        throw new Error("high v'");
    }
}
export function applyAcceleration(dydt, i, ax, ay) {
    if (ax === NaN || ay === NaN)
        throw new Error('NaN acceleration');
    if (ax === Infinity || ay === Infinity)
        throw new Error('Infinity acceleration');
    dydt[i * 4 + 2] += ax;
    dydt[i * 4 + 3] += ay;
    if (dydt[i * 4 + 2] === NaN || dydt[i * 4 + 2] === Infinity || dydt[i * 4 + 3] === NaN || dydt[i * 4 + 3] === Infinity)
        throw new Error('bad dydt');
    if (Math.abs(dydt[i * 4 + 2]) > 1000000000 || Math.abs(dydt[i * 4 + 3]) > 1000000000) {
        throw new Error("high v'");
    }
}
;
export class ParticleSim {
    constructor(odeCtor, init, g, dampk, force) {
        this.g = g;
        this.dampk = dampk;
        this.m = new Float32Array(init.length);
        const y = new Float32Array(init.length * 4);
        for (let i = 0; i < init.length; i++) {
            this.m[i] = init[i].m;
            y[i * 4 + 0] = init[i].d[0];
            y[i * 4 + 1] = init[i].d[1];
            const v = init[i].v;
            if (v !== undefined) {
                y[i * 4 + 2] = v[0];
                y[i * 4 + 3] = v[1];
            }
        }
        // TODO: Clear out init so we don't capture it in the lambdas below?
        const odeDerivative = (t, y, dydt) => {
            const length = this.m.length;
            const gx = this.g[0];
            const gy = this.g[1];
            const dampk = this.dampk;
            for (let i = 0; i < length; i++) {
                // Derivative of position is velocity.
                dydt[i * 4 + 0] = y[i * 4 + 2];
                dydt[i * 4 + 1] = y[i * 4 + 3];
                // Start derivative of velocity with acceleration due to gravity and damping.
                dydt[i * 4 + 2] = gx - dampk * y[i * 4 + 2];
                dydt[i * 4 + 3] = gy - dampk * y[i * 4 + 3];
            }
            // Apply all other forces (beyond gravity)
            force(t, y, this.m, dydt);
        };
        this.method = new odeCtor(y, odeDerivative);
    }
    save() {
        const m = this.m;
        const y = this.method.y;
        const s = new Float32Array(m.length + y.length);
        s.set(y, 0);
        s.set(m, y.length);
        return s;
    }
    restore(t, s) {
        if (s.length % 5 !== 0) {
            throw new Error('saved state length must be a multiple of 5');
        }
        const length = s.length / 5;
        this.method.restore(t, s.subarray(0, length * 4));
        this.m = resizeFloat32Array(this.m, length);
        this.m.set(s.subarray(length * 4, length * 5));
    }
    reset(i, m, dx, dy, vx, vy) {
        const y = this.method.y;
        console.log(`reset ${i} ${m} ${dx} ${dy} ${vx} ${vy}, old ${this.m[i]} ${y[i * 4]} ${y[i * 4 + 1]} ${y[i * 4 + 1]} ${y[i * 4 + 1]}`);
        this.m[i] = m;
        y[i * 4] = dx;
        y[i * 4 + 1] = dy;
        y[i * 4 + 2] = vx;
        y[i * 4 + 3] = vy;
    }
    add(m, dx, dy, vx, vy) {
        const i = this.m.length;
        console.log(`add ${i} ${m} ${dx} ${dy} ${vx || 0} ${vy || 0}`);
        this.m = resizeFloat32Array(this.m, i + 1);
        this.m[i] = m;
        this.method.add(dx, dy, vx || 0, vy || 0);
        return i;
    }
    get t() {
        return this.method.t;
    }
    next(h) {
        this.method.next(h);
    }
    length() {
        return this.m.length;
    }
    getM(i) {
        return this.m[i];
    }
    getDx(i) {
        return this.method.y[i * 4 + 0];
    }
    getDy(i) {
        return this.method.y[i * 4 + 1];
    }
    getVx(i) {
        return this.method.y[i * 4 + 2];
    }
    getVy(i) {
        return this.method.y[i * 4 + 3];
    }
}
;
//# sourceMappingURL=data:application/json;base64,