// Copyright Charles Dueck 2020
import { resizeFloat32Array } from "./ode.js";
export class Euler {
    constructor(y, derivative) {
        this.t = 0;
        this.y = y;
        this.dydt = new Float32Array(y.length);
        this.derivative = derivative;
    }
    save() {
        return new Float32Array(this.y);
    }
    add(...ys) {
        const l = this.y.length;
        this.y = resizeFloat32Array(this.y, l + ys.length);
        this.dydt = resizeFloat32Array(this.dydt, this.y.length);
        this.y.set(ys, l);
    }
    next(h) {
        const y = this.y;
        const dydt = this.dydt;
        this.derivative(this.t, y, dydt);
        for (let i = 0; i < y.length; i++) {
            y[i] += h * dydt[i];
        }
        this.t += h;
    }
    restore(t, y) {
        this.t = t;
        this.y = resizeFloat32Array(this.y, y.length);
        this.dydt = resizeFloat32Array(this.dydt, y.length);
        this.y.set(y);
    }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXVsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXVsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRS9CLE9BQU8sRUFBZ0Msa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFNUUsTUFBTSxPQUFPLEtBQUs7SUFNZCxZQUFZLENBQWUsRUFBRSxVQUFzQjtRQUMvQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUk7UUFDQSxPQUFPLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQUcsRUFBWTtRQUNmLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxDQUFDLENBQVM7UUFDVixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBUyxFQUFFLENBQWU7UUFDOUIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBDaGFybGVzIER1ZWNrIDIwMjBcblxuaW1wb3J0IHsgRHluYW1pY09ERU1ldGhvZCwgRGVyaXZhdGl2ZSwgcmVzaXplRmxvYXQzMkFycmF5IH0gZnJvbSBcIi4vb2RlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBFdWxlciBpbXBsZW1lbnRzIER5bmFtaWNPREVNZXRob2Q8RmxvYXQzMkFycmF5PiB7XG4gICAgdDogbnVtYmVyO1xuICAgIHk6IEZsb2F0MzJBcnJheTtcbiAgICBwcml2YXRlIGR5ZHQ6IEZsb2F0MzJBcnJheTtcbiAgICBwcml2YXRlIGRlcml2YXRpdmU6IERlcml2YXRpdmU7XG5cbiAgICBjb25zdHJ1Y3Rvcih5OiBGbG9hdDMyQXJyYXksIGRlcml2YXRpdmU6IERlcml2YXRpdmUpIHtcbiAgICAgICAgdGhpcy50ID0gMDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5keWR0ID0gbmV3IEZsb2F0MzJBcnJheSh5Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZGVyaXZhdGl2ZSA9IGRlcml2YXRpdmU7XG4gICAgfVxuICAgIHNhdmUoKTogRmxvYXQzMkFycmF5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodGhpcy55KTtcbiAgICB9XG5cbiAgICBhZGQoLi4ueXM6IG51bWJlcltdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGwgPSB0aGlzLnkubGVuZ3RoO1xuICAgICAgICB0aGlzLnkgPSByZXNpemVGbG9hdDMyQXJyYXkodGhpcy55LCBsICsgeXMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5keWR0ID0gcmVzaXplRmxvYXQzMkFycmF5KHRoaXMuZHlkdCwgdGhpcy55Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMueS5zZXQoeXMsIGwpO1xuICAgIH1cblxuICAgIG5leHQoaDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgICAgIGNvbnN0IGR5ZHQgPSB0aGlzLmR5ZHQ7XG4gICAgICAgIHRoaXMuZGVyaXZhdGl2ZSh0aGlzLnQsIHksIGR5ZHQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHlbaV0gKz0gaCAqIGR5ZHRbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ICs9IGg7XG4gICAgfVxuXG4gICAgcmVzdG9yZSh0OiBudW1iZXIsIHk6IEZsb2F0MzJBcnJheSk6IHZvaWQge1xuICAgICAgICB0aGlzLnQgPSB0O1xuICAgICAgICB0aGlzLnkgPSByZXNpemVGbG9hdDMyQXJyYXkodGhpcy55LCB5Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZHlkdCA9IHJlc2l6ZUZsb2F0MzJBcnJheSh0aGlzLmR5ZHQsIHkubGVuZ3RoKTtcbiAgICAgICAgdGhpcy55LnNldCh5KTtcbiAgICB9XG59OyJdfQ==