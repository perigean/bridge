export function pointDistance(p1, p2) {
    const dx = p1[0] - p2[0];
    const dy = p1[1] - p2[1];
    return Math.sqrt(dx * dx + dy * dy);
}
export function pointEquals(p1, p2) {
    return p1[0] === p2[0] && p1[1] === p2[1];
}
export function pointSub(p1, p2) {
    return [
        p1[0] - p2[0],
        p1[1] - p2[1],
    ];
}
export function pointAdd(p1, p2) {
    return [
        p1[0] + p2[0],
        p1[1] + p2[1],
    ];
}
export function pointMidpoint(p1, p2) {
    return [
        (p1[0] + p2[0]) * 0.5,
        (p1[1] + p2[1]) * 0.5,
    ];
}
export function pointAngle(p) {
    return Math.atan2(p[0], p[1]);
}
// pointToBasis computes [x, y] s.t. x * n + y * m = p.
export function pointToBasis(n, m, p) {
    const det = n[0] * m[1] - n[1] * m[0];
    if (det === 0) {
        throw new Error("TODO: support non invertable basis");
    }
    return [
        (m[1] * p[0] - m[0] * p[1]) / det,
        (n[0] * p[1] - n[1] * p[0]) / det,
    ];
}
export function pointFromBasis(n, m, q) {
    return [
        n[0] * q[0] + m[0] * q[1],
        n[1] * q[0] + m[1] * q[1],
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFXLEVBQUUsRUFBVztJQUNsRCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQVcsRUFBRSxFQUFXO0lBQ2hELE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQVcsRUFBRSxFQUFXO0lBQzdDLE9BQU87UUFDSCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2hCLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxFQUFXLEVBQUUsRUFBVztJQUM3QyxPQUFPO1FBQ0gsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNoQixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBVyxFQUFFLEVBQVc7SUFDbEQsT0FBTztRQUNILENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUc7UUFDckIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRztLQUN4QixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsQ0FBVTtJQUNqQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCx1REFBdUQ7QUFDdkQsTUFBTSxVQUFVLFlBQVksQ0FBQyxDQUFVLEVBQUUsQ0FBVSxFQUFFLENBQVU7SUFDM0QsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztLQUN6RDtJQUNELE9BQU87UUFDSCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUc7UUFDakMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHO0tBQ3BDLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxDQUFVLEVBQUUsQ0FBVSxFQUFFLENBQVU7SUFDN0QsT0FBTztRQUNILENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM1QixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IHR5cGUgUG9pbnQyRCA9IFtudW1iZXIsIG51bWJlcl07XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludERpc3RhbmNlKHAxOiBQb2ludDJELCBwMjogUG9pbnQyRCk6IG51bWJlciB7XG4gICAgY29uc3QgZHggPSBwMVswXSAtIHAyWzBdO1xuICAgIGNvbnN0IGR5ID0gcDFbMV0gLSBwMlsxXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50RXF1YWxzKHAxOiBQb2ludDJELCBwMjogUG9pbnQyRCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwMVswXSA9PT0gcDJbMF0gJiYgcDFbMV0gPT09IHAyWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRTdWIocDE6IFBvaW50MkQsIHAyOiBQb2ludDJEKTogUG9pbnQyRCB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgcDFbMF0gLSBwMlswXSxcbiAgICAgICAgcDFbMV0gLSBwMlsxXSxcbiAgICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRBZGQocDE6IFBvaW50MkQsIHAyOiBQb2ludDJEKTogUG9pbnQyRCB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgcDFbMF0gKyBwMlswXSxcbiAgICAgICAgcDFbMV0gKyBwMlsxXSxcbiAgICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRNaWRwb2ludChwMTogUG9pbnQyRCwgcDI6IFBvaW50MkQpOiBQb2ludDJEIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAocDFbMF0gKyBwMlswXSkgKiAwLjUsXG4gICAgICAgIChwMVsxXSArIHAyWzFdKSAqIDAuNSxcbiAgICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRBbmdsZShwOiBQb2ludDJEKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihwWzBdLCBwWzFdKTtcbn1cblxuLy8gcG9pbnRUb0Jhc2lzIGNvbXB1dGVzIFt4LCB5XSBzLnQuIHggKiBuICsgeSAqIG0gPSBwLlxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50VG9CYXNpcyhuOiBQb2ludDJELCBtOiBQb2ludDJELCBwOiBQb2ludDJEKTogUG9pbnQyRCB7XG4gICAgY29uc3QgZGV0ID0gblswXSAqIG1bMV0gLSBuWzFdICogbVswXTtcbiAgICBpZiAoZGV0ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRPRE86IHN1cHBvcnQgbm9uIGludmVydGFibGUgYmFzaXNcIik7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIChtWzFdICogcFswXSAtIG1bMF0gKiBwWzFdKSAvIGRldCxcbiAgICAgICAgKG5bMF0gKiBwWzFdIC0gblsxXSAqIHBbMF0pIC8gZGV0LFxuICAgIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludEZyb21CYXNpcyhuOiBQb2ludDJELCBtOiBQb2ludDJELCBxOiBQb2ludDJEKTogUG9pbnQyRCB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgblswXSAqIHFbMF0gKyBtWzBdICogcVsxXSxcbiAgICAgICAgblsxXSAqIHFbMF0gKyBtWzFdICogcVsxXSxcbiAgICBdO1xufSJdfQ==