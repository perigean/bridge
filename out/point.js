// Copyright Charles Dueck 2020
export function pointDistance(p1, p2) {
    const dx = p1[0] - p2[0];
    const dy = p1[1] - p2[1];
    return Math.sqrt(dx * dx + dy * dy);
}
export function pointEquals(p1, p2) {
    return p1[0] === p2[0] && p1[1] === p2[1];
}
export function pointSub(p1, p2) {
    return [
        p1[0] - p2[0],
        p1[1] - p2[1],
    ];
}
export function pointAdd(p1, p2) {
    return [
        p1[0] + p2[0],
        p1[1] + p2[1],
    ];
}
export function pointMidpoint(p1, p2) {
    return [
        (p1[0] + p2[0]) * 0.5,
        (p1[1] + p2[1]) * 0.5,
    ];
}
export function pointAngle(p) {
    return Math.atan2(p[0], p[1]);
}
// pointToBasis computes [x, y] s.t. x * n + y * m = p.
export function pointToBasis(n, m, p) {
    const det = n[0] * m[1] - n[1] * m[0];
    if (det === 0) {
        throw new Error("TODO: support non invertable basis");
    }
    return [
        (m[1] * p[0] - m[0] * p[1]) / det,
        (n[0] * p[1] - n[1] * p[0]) / det,
    ];
}
export function pointFromBasis(n, m, q) {
    return [
        n[0] * q[0] + m[0] * q[1],
        n[1] * q[0] + m[1] * q[1],
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBSS9CLE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBVyxFQUFFLEVBQVc7SUFDbEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxFQUFXLEVBQUUsRUFBVztJQUNoRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxFQUFXLEVBQUUsRUFBVztJQUM3QyxPQUFPO1FBQ0gsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNoQixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBVyxFQUFFLEVBQVc7SUFDN0MsT0FBTztRQUNILEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDaEIsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQVcsRUFBRSxFQUFXO0lBQ2xELE9BQU87UUFDSCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHO1FBQ3JCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUc7S0FDeEIsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLENBQVU7SUFDakMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQsdURBQXVEO0FBQ3ZELE1BQU0sVUFBVSxZQUFZLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVO0lBQzNELE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7S0FDekQ7SUFDRCxPQUFPO1FBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHO1FBQ2pDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRztLQUNwQyxDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVO0lBQzdELE9BQU87UUFDSCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQ2hhcmxlcyBEdWVjayAyMDIwXG5cbmV4cG9ydCB0eXBlIFBvaW50MkQgPSBbbnVtYmVyLCBudW1iZXJdO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnREaXN0YW5jZShwMTogUG9pbnQyRCwgcDI6IFBvaW50MkQpOiBudW1iZXIge1xuICAgIGNvbnN0IGR4ID0gcDFbMF0gLSBwMlswXTtcbiAgICBjb25zdCBkeSA9IHAxWzFdIC0gcDJbMV07XG4gICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludEVxdWFscyhwMTogUG9pbnQyRCwgcDI6IFBvaW50MkQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcDFbMF0gPT09IHAyWzBdICYmIHAxWzFdID09PSBwMlsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50U3ViKHAxOiBQb2ludDJELCBwMjogUG9pbnQyRCk6IFBvaW50MkQge1xuICAgIHJldHVybiBbXG4gICAgICAgIHAxWzBdIC0gcDJbMF0sXG4gICAgICAgIHAxWzFdIC0gcDJbMV0sXG4gICAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50QWRkKHAxOiBQb2ludDJELCBwMjogUG9pbnQyRCk6IFBvaW50MkQge1xuICAgIHJldHVybiBbXG4gICAgICAgIHAxWzBdICsgcDJbMF0sXG4gICAgICAgIHAxWzFdICsgcDJbMV0sXG4gICAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50TWlkcG9pbnQocDE6IFBvaW50MkQsIHAyOiBQb2ludDJEKTogUG9pbnQyRCB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgKHAxWzBdICsgcDJbMF0pICogMC41LFxuICAgICAgICAocDFbMV0gKyBwMlsxXSkgKiAwLjUsXG4gICAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50QW5nbGUocDogUG9pbnQyRCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIocFswXSwgcFsxXSk7XG59XG5cbi8vIHBvaW50VG9CYXNpcyBjb21wdXRlcyBbeCwgeV0gcy50LiB4ICogbiArIHkgKiBtID0gcC5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludFRvQmFzaXMobjogUG9pbnQyRCwgbTogUG9pbnQyRCwgcDogUG9pbnQyRCk6IFBvaW50MkQge1xuICAgIGNvbnN0IGRldCA9IG5bMF0gKiBtWzFdIC0gblsxXSAqIG1bMF07XG4gICAgaWYgKGRldCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUT0RPOiBzdXBwb3J0IG5vbiBpbnZlcnRhYmxlIGJhc2lzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICAobVsxXSAqIHBbMF0gLSBtWzBdICogcFsxXSkgLyBkZXQsXG4gICAgICAgIChuWzBdICogcFsxXSAtIG5bMV0gKiBwWzBdKSAvIGRldCxcbiAgICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRGcm9tQmFzaXMobjogUG9pbnQyRCwgbTogUG9pbnQyRCwgcTogUG9pbnQyRCk6IFBvaW50MkQge1xuICAgIHJldHVybiBbXG4gICAgICAgIG5bMF0gKiBxWzBdICsgbVswXSAqIHFbMV0sXG4gICAgICAgIG5bMV0gKiBxWzBdICsgbVsxXSAqIHFbMV0sXG4gICAgXTtcbn0iXX0=