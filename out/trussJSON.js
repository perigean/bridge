// Copyright 2021 Charles Dueck
export function getPin(truss, pin) {
    if (pin < -truss.fixedPins.length) {
        throw new Error(`Unkown pin index ${pin}`);
    }
    else if (pin < 0) {
        return truss.fixedPins[truss.fixedPins.length + pin];
    }
    else if (pin < truss.trainPins.length) {
        return truss.trainPins[pin];
    }
    else if (pin - truss.trainPins.length < truss.editPins.length) {
        return truss.editPins[pin - truss.trainPins.length];
    }
    else {
        throw new Error(`Unkown pin index ${pin}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1c3NKU09OLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RydXNzSlNPTi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUE0RC9CLE1BQU0sVUFBVSxNQUFNLENBQUMsS0FBZ0IsRUFBRSxHQUFXO0lBQ2hELElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtRQUNoQixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDeEQ7U0FBTSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNyQyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDL0I7U0FBTSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtRQUM3RCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkQ7U0FBTTtRQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDOUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEgQ2hhcmxlcyBEdWVja1xuXG5pbXBvcnQgeyBQb2ludDJEIH0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuLy8gVE9ETzogdmFsaWRhdGlvbiBjb2RlP1xuXG5leHBvcnQgdHlwZSBCZWFtSlNPTiA9IHtcbiAgICBwMTogbnVtYmVyOyAvLyBJbmRleCBvZiBwaW4gYXQgYmVnaW5uaW5nIG9mIGJlYW0uXG4gICAgcDI6IG51bWJlcjsgLy8gSW5kZXggb2YgcGluIGF0IGVuZCBvZiBiZWFtLlxuICAgIG06IG51bWJlcjsgIC8vIEluZGV4IG9mIG1hdGVyaWFsIG9mIGJlYW0uXG4gICAgdzogbnVtYmVyOyAgLy8gV2lkdGggb2YgYmVhbS5cbiAgICBsPzogbnVtYmVyOyAvLyBMZW5ndGggb2YgYmVhbSwgb25seSBzcGVjaWZpZWQgd2hlbiBwcmUtc3RyYWluaW5nLlxuICAgIGRlY2s/OiBib29sZWFuOyAvLyBJcyB0aGlzIGJlYW0gYSBkZWNrPyAoZG8gZGlzY3MgY29sbGlkZT8pXG59O1xuXG5leHBvcnQgdHlwZSBEaXNjSlNPTiA9IHtcbiAgICBwOiBudW1iZXI7ICAvLyBJbmRleCBvZiBtb3ZlYWJsZSBwaW4gdGhpcyBkaXNjIHN1cnJvdW5kcy5cbiAgICBtOiBudW1iZXI7ICAvLyBNYXRlcmlhbCBvZiBkaXNjLlxuICAgIHI6IG51bWJlcjsgIC8vIFJhZGl1cyBvZiBkaXNjLlxuICAgIHY6IG51bWJlcjsgIC8vIFZlbG9jaXR5IG9mIHN1cmZhY2Ugb2YgZGlzYyAoaW4gQ0NXIGRpcmVjdGlvbikuXG59O1xuXG5leHBvcnQgdHlwZSBNYXRlcmlhbEpTT04gPSB7XG4gICAgRTogbnVtYmVyOyAgLy8gWW91bmcncyBtb2R1bHVzIGluIFBhLlxuICAgIGRlbnNpdHk6IG51bWJlcjsgICAgLy8ga2cvbV4zXG4gICAgc3R5bGU6IHN0cmluZyB8IENhbnZhc0dyYWRpZW50IHwgQ2FudmFzUGF0dGVybjtcbiAgICBmcmljdGlvbjogbnVtYmVyO1xuICAgIG1heExlbmd0aDogbnVtYmVyO1xuICAgIHRlbnNpb25ZaWVsZDogbnVtYmVyO1xuICAgIGJ1Y2tsZVlpZWxkOiBudW1iZXI7XG4gICAgLy8gVE9ETzogd29yayBoYXJkZW5pbmcsIGV0Yy5cbn07XG5cbi8vIFBpbiBpbmRleGluZ1xuLy9cbi8vICBQaW5zIGFyZSBpbmRleGVkIHN1Y2ggdGhhdCBwaW5zIHRoYXQgY2FuJ3QgbW92ZSBkdXJpbmcgdGhlIHNpbXVsYXRpb24gaGF2ZVxuLy8gIG5lZ2F0aXZlIGluZGljZXMsIGFuZCBwaW5zIHRoYXQgY2FuIG1vdmUgaGF2ZSBub24tbmVnYXRpdmUgaW5kaWNlcy4gVGhpc1xuLy8gIG1ha2VzIHNldHRpbmcgdXAgdGhlIHN0YXRlIHZlY3RvciBmb3IgT0RFTWV0aG9kIHNpbXBsZXIuXG4vLyAgW1xuLy8gICAgICAtZml4ZWRQaW5zLmxlbmd0aDogZml4ZWRQaW5zWzBdXG4vLyAgICAgIC4uLlxuLy8gICAgICAtMTogZml4ZWRQaW5zW2ZpeGVkUGlucy5sZW5ndGgtMV1cbi8vICAgICAgMDogdHJhaW5QaW5zWzBdXG4vLyAgICAgIC4uLlxuLy8gICAgICB0cmFpblBpbnMubGVuZ3RoIC0gMTogdHJhaW5QaW5zW3RyYWluUGlucy5sZW5ndGggLSAxXVxuLy8gICAgICB0cmFpblBpbnMubGVuZ3RoOiBlZGl0UGluc1swXVxuLy8gICAgICAuLi5cbi8vICAgICAgdHJhaW5QaW5zLmxlbmd0aCArIGVkaXRQaW5zLmxlbmd0aCAtIDE6IGVkaXRQaW5zW2VkaXRQaW5zLmxlbmd0aCAtIDFdXG4vLyAgXVxuXG5leHBvcnQgdHlwZSBUcnVzc0pTT04gPSB7XG4gICAgZml4ZWRQaW5zOiBBcnJheTxQb2ludDJEPjtcbiAgICB0cmFpblBpbnM6IEFycmF5PFBvaW50MkQ+O1xuICAgIGVkaXRQaW5zOiBBcnJheTxQb2ludDJEPjtcbiAgICB0cmFpbkJlYW1zOiBBcnJheTxCZWFtSlNPTj47XG4gICAgZWRpdEJlYW1zOiBBcnJheTxCZWFtSlNPTj47XG4gICAgZGlzY3M6IEFycmF5PERpc2NKU09OPjtcbiAgICBtYXRlcmlhbHM6IEFycmF5PE1hdGVyaWFsSlNPTj47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGluKHRydXNzOiBUcnVzc0pTT04sIHBpbjogbnVtYmVyKTogUG9pbnQyRCB7XG4gICAgaWYgKHBpbiA8IC10cnVzcy5maXhlZFBpbnMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rb3duIHBpbiBpbmRleCAke3Bpbn1gKTtcbiAgICB9IGVsc2UgaWYgKHBpbiA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRydXNzLmZpeGVkUGluc1t0cnVzcy5maXhlZFBpbnMubGVuZ3RoICsgcGluXTtcbiAgICB9IGVsc2UgaWYgKHBpbiA8IHRydXNzLnRyYWluUGlucy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydXNzLnRyYWluUGluc1twaW5dO1xuICAgIH0gZWxzZSBpZiAocGluIC0gdHJ1c3MudHJhaW5QaW5zLmxlbmd0aCA8IHRydXNzLmVkaXRQaW5zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1c3MuZWRpdFBpbnNbcGluIC0gdHJ1c3MudHJhaW5QaW5zLmxlbmd0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtvd24gcGluIGluZGV4ICR7cGlufWApO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgVGVycmFpbkpTT04gPSB7XG4gICAgaG1hcDogQXJyYXk8bnVtYmVyPjtcbiAgICBmcmljdGlvbjogbnVtYmVyO1xuICAgIHN0eWxlOiBzdHJpbmcgfCBDYW52YXNHcmFkaWVudCB8IENhbnZhc1BhdHRlcm47XG59O1xuXG5leHBvcnQgdHlwZSBBZGRCZWFtQWN0aW9uSlNPTiA9IHtcbiAgICB0eXBlOiBcImFkZF9iZWFtXCI7XG4gICAgcDE6IG51bWJlcjtcbiAgICBwMjogbnVtYmVyO1xuICAgIG06IG51bWJlcjtcbiAgICB3OiBudW1iZXI7XG4gICAgbD86IG51bWJlcjtcbiAgICBkZWNrPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIEFkZFBpbkFjdGlvbkpTT04gPSB7XG4gICAgdHlwZTogXCJhZGRfcGluXCI7XG4gICAgcGluOiBQb2ludDJEO1xufTtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlQWN0aW9uSlNPTiA9IHtcbiAgICB0eXBlOiBcImNvbXBvc2l0ZVwiO1xuICAgIGFjdGlvbnM6IEFycmF5PFNjZW5lQWN0aW9uSlNPTj47XG59O1xuXG5leHBvcnQgdHlwZSBTY2VuZUFjdGlvbkpTT04gPSBBZGRCZWFtQWN0aW9uSlNPTiB8IEFkZFBpbkFjdGlvbkpTT04gfCBDb21wb3NpdGVBY3Rpb25KU09OO1xuXG5leHBvcnQgdHlwZSBTY2VuZUpTT04gPSB7XG4gICAgdHJ1c3M6IFRydXNzSlNPTjtcbiAgICB0ZXJyYWluOiBUZXJyYWluSlNPTjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGc6IFBvaW50MkQ7ICAvLyBBY2NlbGVyYXRpb24gZHVlIHRvIGdyYXZpdHkuXG4gICAgcmVkb1N0YWNrOiBBcnJheTxTY2VuZUFjdGlvbkpTT04+O1xuICAgIHVuZG9TdGFjazogQXJyYXk8U2NlbmVBY3Rpb25KU09OPjtcbn07XG4iXX0=