// Copyright Charles Dueck 2020
import { pointAdd, pointSub, pointAngle, pointDistance } from "./point.js";
import { transformTranslateCreate, transformRotate, transformStretch, transformInvert, transformPoint, transformTranslate, transformScale } from './transform.js';
export const TOP_LEFT = 0;
export const TOP_RIGHT = 1;
export const BOTTOM_LEFT = 2;
export const BOTTOM_RIGHT = 3;
// Viewport keeps track of world <-> screen coordinates
// World coordinates are +x -> right, +y -> up
export class Viewport {
    constructor(ctx, render) {
        this.ctx = ctx;
        this.clearStyle = "white";
        this.posClipper = null;
        this.render = render;
        this.recentRedraw = false;
        this.redrawRequested = false;
        this.redraw = () => {
            this.recentRedraw = true;
            requestAnimationFrame(this.clearRecentRedraw);
            const ctx = this.ctx;
            if (this.clearStyle !== null) {
                const fillStyle = ctx.fillStyle;
                ctx.fillStyle = this.clearStyle;
                ctx.resetTransform();
                ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx.fillStyle = fillStyle;
            }
            const t = this.w2c;
            ctx.setTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
            this.render(this.bounds, this.pos.scale, ctx);
        };
        this.clearRecentRedraw = () => {
            const requested = this.redrawRequested;
            this.recentRedraw = false;
            this.redrawRequested = false;
            if (requested) {
                this.redraw();
            }
        };
        this.resize = () => {
            const canvas = this.ctx.canvas;
            canvas.width = canvas.offsetWidth * window.devicePixelRatio;
            canvas.height = canvas.offsetHeight * window.devicePixelRatio;
            this.setPosition(this.pos);
        };
        const canvas = this.ctx.canvas;
        canvas.width = canvas.offsetWidth * window.devicePixelRatio;
        canvas.height = canvas.offsetHeight * window.devicePixelRatio;
        // Will be reset in setLocation below.
        this.pos = { pos: [0.0, 0.0], scale: 1.0, rotate: 0.0 };
        this.s2w = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        this.w2c = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        this.w2s = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        this.bounds = [
            [0.0, 0.0],
            [0.0, 0.0],
            [0.0, 0.0],
            [0.0, 0.0],
        ];
        this.setPosition(this.pos);
    }
    requestRedraw() {
        if (this.recentRedraw) {
            this.redrawRequested = true;
        }
        else {
            this.redraw();
        }
    }
    setClearStyle(clearStyle) {
        this.clearStyle = clearStyle;
        this.requestRedraw();
    }
    setClipPosition(clip) {
        this.posClipper = clip;
        this.setPosition(this.pos);
    }
    setPosition(pos) {
        if (pos.pos !== undefined) {
            this.pos.pos = pos.pos;
        }
        if (pos.rotate !== undefined) {
            if (pos.rotate >= Math.PI) {
                this.pos.rotate = pos.rotate - Math.floor(pos.rotate / (2.0 * Math.PI)) * 2.0 * Math.PI;
            }
            else if (pos.rotate < -Math.PI) {
                this.pos.rotate = pos.rotate - Math.ceil(pos.rotate / (2.0 * Math.PI)) * 2.0 * Math.PI;
            }
            else {
                this.pos.rotate = pos.rotate;
            }
        }
        if (pos.scale !== undefined) {
            this.pos.scale = pos.scale;
        }
        if (this.posClipper !== null) {
            this.pos = this.posClipper(this.pos);
        }
        const canvas = this.ctx.canvas;
        const dpr = window.devicePixelRatio;
        const width = canvas.offsetWidth;
        const height = canvas.offsetHeight;
        let w2 = transformTranslateCreate(-this.pos.pos[0], -this.pos.pos[1]);
        w2 = transformRotate(w2, this.pos.rotate);
        w2 = transformStretch(w2, this.pos.scale, -this.pos.scale);
        w2 = transformTranslate(w2, width * 0.5, height * 0.5);
        this.w2s = w2;
        w2 = transformScale(w2, dpr);
        this.w2c = w2;
        const s2w = transformInvert(this.w2s);
        this.bounds[0] = transformPoint(s2w, [0, 0]);
        this.bounds[1] = transformPoint(s2w, [width, 0]);
        this.bounds[2] = transformPoint(s2w, [0, height]);
        this.bounds[3] = transformPoint(s2w, [width, height]);
        this.s2w = s2w;
        this.requestRedraw();
    }
    position() {
        return this.pos;
    }
    screen2world() {
        return this.s2w;
    }
    world2screen() {
        return this.w2s;
    }
}
export class PanGesture {
    constructor(vp) {
        this.vp = vp;
    }
    tap(_t) { }
    pan(ps) {
        if (ps.length != 1) {
            return;
        }
        const pos = this.vp.position();
        const s2w = this.vp.screen2world();
        const p = ps[ps.length - 1];
        const curr = transformPoint(s2w, p.curr);
        const prev = transformPoint(s2w, p.prev);
        this.vp.setPosition({
            pos: pointAdd(pos.pos, pointSub(prev, curr)),
        });
    }
}
export class PinchZoomGesture {
    constructor(vp) {
        this.vp = vp;
    }
    tap(_t) { }
    pan(ps) {
        if (ps.length < 2) {
            return;
        }
        const pos = this.vp.position();
        const s2w = this.vp.screen2world();
        const p1 = ps[ps.length - 1];
        const p2 = ps[ps.length - 2];
        const wp1prev = transformPoint(s2w, p1.prev);
        const curra = pointAngle(pointSub(p2.curr, p1.curr));
        const preva = pointAngle(pointSub(p2.prev, p1.prev));
        const currl = pointDistance(p1.curr, p2.curr);
        const prevl = pointDistance(p1.prev, p2.prev);
        const wp1curr = transformPoint(s2w, p1.curr);
        let t = transformTranslateCreate(-wp1curr[0], -wp1curr[1]);
        t = transformScale(t, prevl / currl);
        t = transformRotate(t, preva - curra);
        t = transformTranslate(t, wp1prev[0], wp1prev[1]);
        // TODO: why does this work? Isn't it backwards?
        this.vp.setPosition({
            pos: transformPoint(t, pos.pos),
            scale: pos.scale * currl / prevl,
            rotate: pos.rotate - preva + curra,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,