// viewport.js
//
// Copyright Charles Dick 2020
import { transformTranslateCreate, transformStretch, transformTranslate, transformInvert, transformPoint, transformRotate } from './transform';
export const TOP_LEFT = 0;
export const TOP_RIGHT = 1;
export const BOTTOM_LEFT = 2;
export const BOTTOM_RIGHT = 3;
// Viewport keeps track of world <-> screen coordinates
// World coordinates are +x -> right, +y -> up
export class Viewport {
    constructor(ctx, render) {
        this.ctx = ctx;
        this.clearStyle = "white";
        this.render = render;
        this.resize = () => {
            const canvas = this.ctx.canvas;
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            this.redraw();
        };
        const canvas = this.ctx.canvas;
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        // Will be reset in setLocation below.
        this.scale = 0.0;
        this.t = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        this.bounds = [
            [0.0, 0.0],
            [0.0, 0.0],
            [0.0, 0.0],
            [0.0, 0.0],
        ];
        this.setLocation([0.0, 0.0], 1.0, 0.0);
    }
    setClearStyle(clearStyle) {
        this.clearStyle = clearStyle;
    }
    setLocation(pos, scale, rotate) {
        const canvas = this.ctx.canvas;
        const width = canvas.width;
        const height = canvas.height;
        let t = transformTranslateCreate(-width * 0.5, -height * 0.5);
        t = transformRotate(t, rotate);
        t = transformStretch(t, scale, -scale);
        t = transformTranslate(t, -pos[0], -pos[1]);
        this.t = t;
        const invt = transformInvert(t);
        this.bounds[0] = transformPoint(invt, [0, 0]);
        this.bounds[1] = transformPoint(invt, [width, 0]);
        this.bounds[2] = transformPoint(invt, [0, height]);
        this.bounds[3] = transformPoint(invt, [width, height]);
        this.scale = scale;
        this.redraw();
    }
    redraw() {
        const ctx = this.ctx;
        if (this.clearStyle !== null) {
            const fillStyle = ctx.fillStyle;
            ctx.fillStyle = this.clearStyle;
            ctx.resetTransform();
            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            ctx.fillStyle = fillStyle;
        }
        const t = this.t;
        ctx.setTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
        this.render(this.bounds, this.scale, ctx);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdmlld3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUNkLEVBQUU7QUFDRiw4QkFBOEI7QUFDOUIsT0FBTyxFQUFvQix3QkFBd0IsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUVoSyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDM0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQztBQUM3QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBUTlCLHVEQUF1RDtBQUN2RCw4Q0FBOEM7QUFDOUMsTUFBTSxPQUFPLFFBQVE7SUFXakIsWUFBWSxHQUE2QixFQUFFLE1BQWM7UUFDckQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNmLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUNsQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDcEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xCLENBQUMsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FB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QUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEQsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDN0I7UUFDRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aWV3cG9ydC5qc1xuLy9cbi8vIENvcHlyaWdodCBDaGFybGVzIERpY2sgMjAyMFxuaW1wb3J0IHtBZmZpbmUyRCwgUG9pbnQyRCwgdHJhbnNmb3JtVHJhbnNsYXRlQ3JlYXRlLCB0cmFuc2Zvcm1TdHJldGNoLCB0cmFuc2Zvcm1UcmFuc2xhdGUsIHRyYW5zZm9ybUludmVydCwgdHJhbnNmb3JtUG9pbnQsIHRyYW5zZm9ybVJvdGF0ZX0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuXG5leHBvcnQgY29uc3QgVE9QX0xFRlQgPSAwO1xuZXhwb3J0IGNvbnN0IFRPUF9SSUdIVCA9IDE7XG5leHBvcnQgY29uc3QgQk9UVE9NX0xFRlQgPSAyO1xuZXhwb3J0IGNvbnN0IEJPVFRPTV9SSUdIVCA9IDM7XG5cbmV4cG9ydCB0eXBlIEJvdW5kcyA9IFtQb2ludDJELCBQb2ludDJELCBQb2ludDJELCBQb2ludDJEXTtcblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXIge1xuICAgIChiOiBCb3VuZHMsIHM6IG51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkO1xufVxuXG4vLyBWaWV3cG9ydCBrZWVwcyB0cmFjayBvZiB3b3JsZCA8LT4gc2NyZWVuIGNvb3JkaW5hdGVzXG4vLyBXb3JsZCBjb29yZGluYXRlcyBhcmUgK3ggLT4gcmlnaHQsICt5IC0+IHVwXG5leHBvcnQgY2xhc3MgVmlld3BvcnQge1xuICAgIHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gICAgcHJpdmF0ZSBzY2FsZTogbnVtYmVyO1xuICAgIHByaXZhdGUgdDogQWZmaW5lMkQ7XG4gICAgcHJpdmF0ZSBjbGVhclN0eWxlOiBudWxsIHwgc3RyaW5nIHwgQ2FudmFzR3JhZGllbnQgfCBDYW52YXNQYXR0ZXJuO1xuICAgIHByaXZhdGUgcmVuZGVyOiBSZW5kZXI7XG4gICAgcHJpdmF0ZSBib3VuZHM6IEJvdW5kcztcblxuICAgIC8vIE5lZWRzIHRvIGJlIGhvb2tlZCB1cCB0byBET00gcmVzaXplIGxpc3RlbmVyXG4gICAgcmVzaXplOiAoKSA9PiB2b2lkO1xuXG4gICAgY29uc3RydWN0b3IoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHJlbmRlcjogUmVuZGVyKSB7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLmNsZWFyU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgICAgIHRoaXMucmVuZGVyID0gcmVuZGVyO1xuICAgICAgICB0aGlzLnJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY3R4LmNhbnZhcztcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmN0eC5jYW52YXM7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5vZmZzZXRXaWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgLy8gV2lsbCBiZSByZXNldCBpbiBzZXRMb2NhdGlvbiBiZWxvdy5cbiAgICAgICAgdGhpcy5zY2FsZSA9IDAuMDtcbiAgICAgICAgdGhpcy50ID0gWzAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjBdO1xuICAgICAgICB0aGlzLmJvdW5kcyA9IFtcbiAgICAgICAgICAgIFswLjAsIDAuMF0sXG4gICAgICAgICAgICBbMC4wLCAwLjBdLFxuICAgICAgICAgICAgWzAuMCwgMC4wXSxcbiAgICAgICAgICAgIFswLjAsIDAuMF0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuc2V0TG9jYXRpb24oWzAuMCwgMC4wXSwgMS4wLCAwLjApO1xuICAgIH1cblxuICAgIHNldENsZWFyU3R5bGUoY2xlYXJTdHlsZTogbnVsbCB8IHN0cmluZyB8IENhbnZhc0dyYWRpZW50IHwgQ2FudmFzUGF0dGVybikge1xuICAgICAgICB0aGlzLmNsZWFyU3R5bGUgPSBjbGVhclN0eWxlO1xuICAgIH1cblxuICAgIHNldExvY2F0aW9uKHBvczogUG9pbnQyRCwgc2NhbGU6IG51bWJlciwgcm90YXRlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jdHguY2FudmFzO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgbGV0IHQgPSB0cmFuc2Zvcm1UcmFuc2xhdGVDcmVhdGUoLXdpZHRoICogMC41LCAtaGVpZ2h0ICogMC41KTtcbiAgICAgICAgdCA9IHRyYW5zZm9ybVJvdGF0ZSh0LCByb3RhdGUpO1xuICAgICAgICB0ID0gdHJhbnNmb3JtU3RyZXRjaCh0LCBzY2FsZSwgLXNjYWxlKTtcbiAgICAgICAgdCA9IHRyYW5zZm9ybVRyYW5zbGF0ZSh0LCAtcG9zWzBdLCAtcG9zWzFdKTtcbiAgICAgICAgdGhpcy50ID0gdDtcblxuICAgICAgICBjb25zdCBpbnZ0ID0gdHJhbnNmb3JtSW52ZXJ0KHQpO1xuICAgICAgICB0aGlzLmJvdW5kc1swXSA9IHRyYW5zZm9ybVBvaW50KGludnQsIFswLCAwXSk7XG4gICAgICAgIHRoaXMuYm91bmRzWzFdID0gdHJhbnNmb3JtUG9pbnQoaW52dCwgW3dpZHRoLCAwXSk7XG4gICAgICAgIHRoaXMuYm91bmRzWzJdID0gdHJhbnNmb3JtUG9pbnQoaW52dCwgWzAsIGhlaWdodF0pO1xuICAgICAgICB0aGlzLmJvdW5kc1szXSA9IHRyYW5zZm9ybVBvaW50KGludnQsIFt3aWR0aCwgaGVpZ2h0XSk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICByZWRyYXcoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBpZiAodGhpcy5jbGVhclN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxsU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY2xlYXJTdHlsZTtcbiAgICAgICAgICAgIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsU3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdCA9IHRoaXMudDtcbiAgICAgICAgY3R4LnNldFRyYW5zZm9ybSh0WzBdLCB0WzNdLCB0WzFdLCB0WzRdLCB0WzJdLCB0WzVdKTtcbiAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5ib3VuZHMsIHRoaXMuc2NhbGUsIGN0eCk7XG4gICAgfVxuXG59XG4iXX0=