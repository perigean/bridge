import { transformTranslateCreate, transformRotate, transformStretch, transformInvert, transformPoint, transformTranslate } from './transform.js';
export const TOP_LEFT = 0;
export const TOP_RIGHT = 1;
export const BOTTOM_LEFT = 2;
export const BOTTOM_RIGHT = 3;
// Viewport keeps track of world <-> screen coordinates
// World coordinates are +x -> right, +y -> up
export class Viewport {
    constructor(ctx, render) {
        this.ctx = ctx;
        this.clearStyle = "white";
        this.render = render;
        this.resize = () => {
            const canvas = this.ctx.canvas;
            const dpr = window.devicePixelRatio;
            canvas.width = canvas.offsetWidth * dpr;
            canvas.height = canvas.offsetHeight * dpr;
            this.setPosition(this.pos);
        };
        const canvas = this.ctx.canvas;
        const dpr = window.devicePixelRatio;
        canvas.width = canvas.offsetWidth * dpr;
        canvas.height = canvas.offsetHeight * dpr;
        // Will be reset in setLocation below.
        this.pos = { pos: [0.0, 0.0], scale: dpr, rotate: 0.0 };
        this.t = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        this.bounds = [
            [0.0, 0.0],
            [0.0, 0.0],
            [0.0, 0.0],
            [0.0, 0.0],
        ];
        this.setPosition(this.pos);
    }
    setClearStyle(clearStyle) {
        this.clearStyle = clearStyle;
        this.redraw();
    }
    setPosition(pos) {
        const canvas = this.ctx.canvas;
        const width = canvas.width;
        const height = canvas.height;
        let t = transformTranslateCreate(-pos.pos[0], -pos.pos[1]);
        t = transformRotate(t, pos.rotate);
        t = transformStretch(t, pos.scale, -pos.scale);
        t = transformTranslate(t, width * 0.5, height * 0.5);
        this.t = t;
        const invt = transformInvert(t);
        this.bounds[0] = transformPoint(invt, [0, 0]);
        this.bounds[1] = transformPoint(invt, [width, 0]);
        this.bounds[2] = transformPoint(invt, [0, height]);
        this.bounds[3] = transformPoint(invt, [width, height]);
        this.pos = pos;
        this.redraw();
    }
    redraw() {
        const ctx = this.ctx;
        if (this.clearStyle !== null) {
            const fillStyle = ctx.fillStyle;
            ctx.fillStyle = this.clearStyle;
            ctx.resetTransform();
            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            ctx.fillStyle = fillStyle;
        }
        const t = this.t;
        ctx.setTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
        this.render(this.bounds, this.pos.scale, ctx);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdmlld3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFZLHdCQUF3QixFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUosTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQztBQUMxQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDN0IsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQWM5Qix1REFBdUQ7QUFDdkQsOENBQThDO0FBQzlDLE1BQU0sT0FBTyxRQUFRO0lBV2pCLFlBQVksR0FBNkIsRUFBRSxNQUFjO1FBQ3JELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDZixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDcEMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztZQUN4QyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1lBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFB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QUNyQixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzFCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDaEMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNyQixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM3QjtRQUNELE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakIsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aWV3cG9ydC5qc1xuLy9cbi8vIENvcHlyaWdodCBDaGFybGVzIERpY2sgMjAyMFxuaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gXCIuL3BvaW50LmpzXCJcbmltcG9ydCB7IEFmZmluZTJELCB0cmFuc2Zvcm1UcmFuc2xhdGVDcmVhdGUsIHRyYW5zZm9ybVJvdGF0ZSwgdHJhbnNmb3JtU3RyZXRjaCwgdHJhbnNmb3JtSW52ZXJ0LCB0cmFuc2Zvcm1Qb2ludCwgdHJhbnNmb3JtVHJhbnNsYXRlIH0gZnJvbSAnLi90cmFuc2Zvcm0uanMnO1xuXG5leHBvcnQgY29uc3QgVE9QX0xFRlQgPSAwO1xuZXhwb3J0IGNvbnN0IFRPUF9SSUdIVCA9IDE7XG5leHBvcnQgY29uc3QgQk9UVE9NX0xFRlQgPSAyO1xuZXhwb3J0IGNvbnN0IEJPVFRPTV9SSUdIVCA9IDM7XG5cbmV4cG9ydCB0eXBlIEJvdW5kcyA9IFtQb2ludDJELCBQb2ludDJELCBQb2ludDJELCBQb2ludDJEXTtcblxuZXhwb3J0IHR5cGUgVmlld3BvcnRQb3NpdGlvbiA9IHtcbiAgICBwb3M6IFBvaW50MkQ7XG4gICAgc2NhbGU6IG51bWJlcjtcbiAgICByb3RhdGU6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyIHtcbiAgICAoYjogQm91bmRzLCBzOiBudW1iZXIsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZDtcbn1cblxuLy8gVmlld3BvcnQga2VlcHMgdHJhY2sgb2Ygd29ybGQgPC0+IHNjcmVlbiBjb29yZGluYXRlc1xuLy8gV29ybGQgY29vcmRpbmF0ZXMgYXJlICt4IC0+IHJpZ2h0LCAreSAtPiB1cFxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0IHtcbiAgICByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwcml2YXRlIHBvczogVmlld3BvcnRQb3NpdGlvbjtcbiAgICBwcml2YXRlIHQ6IEFmZmluZTJEO1xuICAgIHByaXZhdGUgY2xlYXJTdHlsZTogbnVsbCB8IHN0cmluZyB8IENhbnZhc0dyYWRpZW50IHwgQ2FudmFzUGF0dGVybjtcbiAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyO1xuICAgIHByaXZhdGUgYm91bmRzOiBCb3VuZHM7XG5cbiAgICAvLyBOZWVkcyB0byBiZSBob29rZWQgdXAgdG8gRE9NIHJlc2l6ZSBsaXN0ZW5lclxuICAgIHJlc2l6ZTogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCByZW5kZXI6IFJlbmRlcikge1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5jbGVhclN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICB0aGlzLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgICAgdGhpcy5yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmN0eC5jYW52YXM7XG4gICAgICAgICAgICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5vZmZzZXRXaWR0aCAqIGRwcjtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMub2Zmc2V0SGVpZ2h0ICogZHByO1xuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jdHguY2FudmFzO1xuICAgICAgICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLm9mZnNldFdpZHRoICogZHByO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLm9mZnNldEhlaWdodCAqIGRwcjtcblxuICAgICAgICAvLyBXaWxsIGJlIHJlc2V0IGluIHNldExvY2F0aW9uIGJlbG93LlxuICAgICAgICB0aGlzLnBvcyA9IHsgcG9zOiBbMC4wLCAwLjBdLCBzY2FsZTogZHByLCByb3RhdGU6IDAuMCB9O1xuICAgICAgICB0aGlzLnQgPSBbMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMF07XG4gICAgICAgIHRoaXMuYm91bmRzID0gW1xuICAgICAgICAgICAgWzAuMCwgMC4wXSxcbiAgICAgICAgICAgIFswLjAsIDAuMF0sXG4gICAgICAgICAgICBbMC4wLCAwLjBdLFxuICAgICAgICAgICAgWzAuMCwgMC4wXSxcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnBvcyk7XG4gICAgfVxuXG4gICAgc2V0Q2xlYXJTdHlsZShjbGVhclN0eWxlOiBudWxsIHwgc3RyaW5nIHwgQ2FudmFzR3JhZGllbnQgfCBDYW52YXNQYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMuY2xlYXJTdHlsZSA9IGNsZWFyU3R5bGU7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24ocG9zOiBWaWV3cG9ydFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY3R4LmNhbnZhcztcbiAgICAgICAgY29uc3Qgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGxldCB0ID0gdHJhbnNmb3JtVHJhbnNsYXRlQ3JlYXRlKC1wb3MucG9zWzBdLCAtcG9zLnBvc1sxXSk7XG4gICAgICAgIHQgPSB0cmFuc2Zvcm1Sb3RhdGUodCwgcG9zLnJvdGF0ZSk7XG4gICAgICAgIHQgPSB0cmFuc2Zvcm1TdHJldGNoKHQsIHBvcy5zY2FsZSwgLXBvcy5zY2FsZSk7XG4gICAgICAgIHQgPSB0cmFuc2Zvcm1UcmFuc2xhdGUodCwgd2lkdGggKiAwLjUsIGhlaWdodCAqIDAuNSk7XG4gICAgICAgIHRoaXMudCA9IHQ7XG5cbiAgICAgICAgY29uc3QgaW52dCA9IHRyYW5zZm9ybUludmVydCh0KTtcbiAgICAgICAgdGhpcy5ib3VuZHNbMF0gPSB0cmFuc2Zvcm1Qb2ludChpbnZ0LCBbMCwgMF0pO1xuICAgICAgICB0aGlzLmJvdW5kc1sxXSA9IHRyYW5zZm9ybVBvaW50KGludnQsIFt3aWR0aCwgMF0pO1xuICAgICAgICB0aGlzLmJvdW5kc1syXSA9IHRyYW5zZm9ybVBvaW50KGludnQsIFswLCBoZWlnaHRdKTtcbiAgICAgICAgdGhpcy5ib3VuZHNbM10gPSB0cmFuc2Zvcm1Qb2ludChpbnZ0LCBbd2lkdGgsIGhlaWdodF0pO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICByZWRyYXcoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBpZiAodGhpcy5jbGVhclN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxsU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY2xlYXJTdHlsZTtcbiAgICAgICAgICAgIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsU3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdCA9IHRoaXMudDtcbiAgICAgICAgY3R4LnNldFRyYW5zZm9ybSh0WzBdLCB0WzNdLCB0WzFdLCB0WzRdLCB0WzJdLCB0WzVdKTtcbiAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5ib3VuZHMsIHRoaXMucG9zLnNjYWxlLCBjdHgpO1xuICAgIH1cblxufVxuIl19