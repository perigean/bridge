// Copyright Charles Dueck 2020
import { pointDistance } from "./point.js";
//import { ODEMethod } from "./ode.js";
//import { Euler } from "./euler.js";
//import { RungeKutta4 } from "./rk4.js";
import { addChild, Box, Fill, Layer, Position, Relative, removeChild } from "./ui/node.js";
export class Scene {
    constructor(scene) {
        this.scene = scene;
        this.onAddPinHandlers = [];
        this.onRemovePinHandlers = [];
        // TODO: proper initialization;
        this.editMaterial = 0;
        this.editWidth = 4;
        this.editDeck = false;
    }
    assertPin(pin) {
        const truss = this.scene.truss;
        if (pin < -truss.fixedPins.length || pin >= truss.startPins.length + truss.editPins.length) {
            throw new Error(`Unknown pin index ${pin}`);
        }
    }
    assertMaterial(m) {
        const materials = this.scene.truss.materials;
        if (m < 0 || m >= materials.length) {
            throw new Error(`Unknown material index ${m}`);
        }
    }
    doAddBeam(a) {
        const truss = this.scene.truss;
        const p1 = a.p1;
        const p2 = a.p2;
        const m = a.m;
        const w = a.w;
        const l = a.l;
        const deck = a.deck;
        this.assertPin(p1);
        this.assertPin(p2);
        this.assertMaterial(m);
        if (w <= 0.0) {
            throw new Error(`Beam width must be greater than 0, got ${w}`);
        }
        if (l !== undefined && l <= 0.0) {
            throw new Error(`Beam length must be greater than 0, got ${l}`);
        }
        if (this.beamExists(p1, p2)) {
            throw new Error(`Beam between pins ${p1} and ${p2} already exists`);
        }
        truss.editBeams.push({ p1, p2, m, w, l, deck });
    }
    undoAddBeam(a) {
        const truss = this.scene.truss;
        const b = truss.editBeams.pop();
        if (b === undefined) {
            throw new Error('No beams exist');
        }
        if (b.p1 !== a.p1 || b.p2 !== a.p2 || b.m !== a.m || b.w != a.w || b.l !== a.l || b.deck !== a.deck) {
            throw new Error('Beam does not match');
        }
    }
    doAddPin(a, ec) {
        const truss = this.scene.truss;
        const editIndex = truss.editPins.length;
        const pin = truss.startPins.length + editIndex;
        truss.editPins.push(a.pin);
        for (const h of this.onAddPinHandlers) {
            h(editIndex, pin, a.pin, ec);
        }
    }
    undoAddPin(a, ec) {
        const truss = this.scene.truss;
        const p = truss.editPins.pop();
        if (p === undefined) {
            throw new Error('No pins exist');
        }
        if (p[0] !== a.pin[0] || p[1] !== a.pin[1]) {
            throw new Error('Pin does not match');
        }
        const editIndex = truss.editPins.length;
        const pin = truss.startPins.length + editIndex;
        for (const h of this.onRemovePinHandlers) {
            h(editIndex, pin, ec);
        }
    }
    doComposite(a, ec) {
        for (let i = 0; i < a.actions.length; i++) {
            this.doAction(a.actions[i], ec);
        }
    }
    undoComposite(a, ec) {
        for (let i = a.actions.length - 1; i >= 0; i--) {
            this.undoAction(a.actions[i], ec);
        }
    }
    doAction(a, ec) {
        switch (a.type) {
            case "add_beam":
                this.doAddBeam(a);
                break;
            case "add_pin":
                this.doAddPin(a, ec);
                break;
            case "composite":
                this.doComposite(a, ec);
                break;
        }
    }
    undoAction(a, ec) {
        switch (a.type) {
            case "add_beam":
                this.undoAddBeam(a);
                break;
            case "add_pin":
                this.undoAddPin(a, ec);
                break;
            case "composite":
                this.undoComposite(a, ec);
                break;
        }
    }
    beamExists(p1, p2) {
        const truss = this.scene.truss;
        for (const beam of truss.editBeams) {
            if ((p1 === beam.p1 && p2 === beam.p2) || (p1 === beam.p2 && p2 === beam.p1)) {
                return true;
            }
        }
        for (const beam of truss.startBeams) {
            if ((p1 === beam.p1 && p2 === beam.p2) || (p1 === beam.p2 && p2 === beam.p1)) {
                return true;
            }
        }
        return false;
    }
    // Scene enumeration/observation methods
    onAddPin(handler) {
        this.onAddPinHandlers.push(handler);
    }
    onRemovePin(handler) {
        this.onRemovePinHandlers.push(handler);
    }
    // TODO: Clear handlers?
    getEditBeams() {
        return this.scene.truss.editBeams;
    }
    getStartBeams() {
        return this.scene.truss.startBeams;
    }
    getMaterial(m) {
        const materials = this.scene.truss.materials;
        if (m < 0 || m >= materials.length) {
            throw new Error(`invalid material ${m}`);
        }
        return materials[m];
    }
    *getUneditablePins() {
        const truss = this.scene.truss;
        let i = -truss.fixedPins.length;
        for (const p of truss.fixedPins) {
            yield { i, p };
            i++;
        }
        for (const p of truss.startPins) {
            yield { i, p };
            i++;
        }
    }
    *getEditPins() {
        const truss = this.scene.truss;
        let i = truss.startPins.length;
        for (const p of truss.editPins) {
            yield { i, p };
            i++;
        }
    }
    getPin(pin) {
        const truss = this.scene.truss;
        if (pin < -truss.fixedPins.length) {
            throw new Error(`Unkown pin index ${pin}`);
        }
        else if (pin < 0) {
            return truss.fixedPins[truss.fixedPins.length + pin];
        }
        else if (pin < truss.startPins.length) {
            return truss.startPins[pin];
        }
        else if (pin - truss.startPins.length < truss.editPins.length) {
            return truss.editPins[pin - truss.startPins.length];
        }
        else {
            throw new Error(`Unkown pin index ${pin}`);
        }
    }
    getClosestPin(p, maxd, beamStart) {
        const truss = this.scene.truss;
        // TODO: acceleration structures. Probably only matters once we have 1000s of pins?
        const block = new Set();
        let res = undefined;
        let resd = maxd;
        if (beamStart !== undefined) {
            for (const b of truss.startBeams) {
                if (b.p1 === beamStart) {
                    block.add(b.p2);
                }
                else if (b.p2 === beamStart) {
                    block.add(b.p1);
                }
            }
            for (const b of truss.editBeams) {
                if (b.p1 === beamStart) {
                    block.add(b.p2);
                }
                else if (b.p2 === beamStart) {
                    block.add(b.p1);
                }
            }
        }
        for (let i = 0; i < truss.fixedPins.length; i++) {
            const d = pointDistance(p, truss.fixedPins[i]);
            if (d < resd) {
                res = i - truss.fixedPins.length;
                resd = d;
            }
        }
        for (let i = 0; i < truss.startPins.length; i++) {
            const d = pointDistance(p, truss.startPins[i]);
            if (d < resd) {
                res = i;
                resd = d;
            }
        }
        for (let i = 0; i < truss.editPins.length; i++) {
            const d = pointDistance(p, truss.editPins[i]);
            if (d < resd) {
                res = i + truss.startPins.length;
                resd = d;
            }
        }
        return res;
    }
    // Scene mutation methods
    undo(ec) {
        const a = this.scene.undoStack.pop();
        if (a === undefined) {
            throw new Error("no action to undo");
        }
        this.undoAction(a, ec);
        this.scene.redoStack.push(a);
    }
    redo(ec) {
        const a = this.scene.redoStack.pop();
        if (a === undefined) {
            throw new Error("no action to redo");
        }
        this.doAction(a, ec);
        this.scene.undoStack.push(a);
    }
    action(a, ec) {
        this.scene.redoStack = [a];
        this.redo(ec); // TODO: Is this too clever?
    }
    addBeam(p1, p2, ec) {
        this.action({
            type: "add_beam",
            p1,
            p2,
            m: this.editMaterial,
            w: this.editWidth,
            l: undefined,
            deck: this.editDeck
        }, ec);
    }
    addPin(pin, ec) {
        this.action({ type: "add_pin", pin }, ec);
    }
    addPinAndBeam(pin, p2, ec) {
        const p1 = this.scene.truss.editPins.length;
        this.action({ type: "composite", actions: [
                { type: "add_pin", pin },
                {
                    type: "add_beam",
                    p1,
                    p2,
                    m: this.editMaterial,
                    w: this.editWidth,
                    l: undefined,
                    deck: this.editDeck
                },
            ] }, ec);
    }
}
;
function createBeamPinOnDraw(ctx, box, _ec, _vp, state) {
    ctx.lineWidth = 2;
    ctx.strokeStyle = "black";
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    ctx.strokeRect(box.left + 1, box.top + 1, box.width - 2, box.height - 2);
    if (state.drag === undefined) {
        return;
    }
    const pin = state.scene.getPin(state.i);
    ctx.lineWidth = 4;
    ctx.beginPath();
    ctx.moveTo(pin[0], pin[1]);
    if (state.drag.i !== undefined) {
        const p = state.scene.getPin(state.drag.i);
        ctx.lineTo(p[0], p[1]);
    }
    else {
        ctx.lineTo(state.drag.p[0], state.drag.p[1]);
    }
    ctx.stroke();
}
function createBeamPinOnPan(ps, ec, state) {
    const i = state.scene.getClosestPin(ps[0].curr, 16, state.i);
    state.drag = {
        p: ps[0].curr,
        i,
    };
    ec.requestDraw();
}
function createBeamPinOnPanEnd(ec, state) {
    if (state.drag === undefined) {
        throw new Error("No drag state OnPanEnd");
    }
    if (state.drag.i === undefined) {
        state.scene.addPinAndBeam(state.drag.p, state.i, ec);
    }
    else if (!state.scene.beamExists(state.drag.i, state.i)) {
        // TODO: replace existing beam if one exists (and is editable).
        state.scene.addBeam(state.drag.i, state.i, ec);
    }
    state.drag = undefined;
}
function CreateBeamPin(scene, i, p) {
    // If we had state that was passed to all handlers, then we could avoid allocating new handlers per Element.
    return Position(p[0] - 8, p[1] - 8, 16, 16, { scene, i })
        .onDraw(createBeamPinOnDraw)
        .onPan(createBeamPinOnPan)
        .onPanEnd(createBeamPinOnPanEnd);
}
function AddTrussEditablePins(scene) {
    const children = [];
    for (const p of scene.getEditPins()) {
        children.push(CreateBeamPin(scene, p.i, p.p));
    }
    const e = Relative(...children);
    scene.onAddPin((editIndex, pin, p, ec) => {
        console.log(`adding Element for pin ${pin} at child[${editIndex}], (${p[0]}, ${p[1]})`);
        addChild(e, CreateBeamPin(scene, pin, p), ec, editIndex);
        ec.requestLayout();
    });
    scene.onRemovePin((editIndex, pin, ec) => {
        console.log(`removing Element for pin ${pin} at child[${editIndex}]`);
        removeChild(e, editIndex, ec);
        ec.requestLayout();
    });
    // TODO: e.onDetach for removeing pin observers.
    return e;
}
function AddTrussUneditablePins(scene) {
    const children = [];
    for (const p of scene.getUneditablePins()) {
        children.push(CreateBeamPin(scene, p.i, p.p));
    }
    return Relative(...children);
}
function AddTrussLayer(scene) {
    return Layer(AddTrussUneditablePins(scene), AddTrussEditablePins(scene));
}
function trussLayerOnDraw(ctx, _box, _ec, _vp, scene) {
    for (const b of scene.getStartBeams()) {
        ctx.lineWidth = b.w;
        ctx.lineCap = "round";
        ctx.strokeStyle = scene.getMaterial(b.m).style;
        ctx.beginPath();
        const p1 = scene.getPin(b.p1);
        const p2 = scene.getPin(b.p2);
        ctx.moveTo(p1[0], p1[1]);
        ctx.lineTo(p2[0], p2[1]);
        ctx.stroke();
    }
    for (const b of scene.getEditBeams()) {
        ctx.lineWidth = b.w;
        ctx.lineCap = "round";
        ctx.strokeStyle = scene.getMaterial(b.m).style;
        ctx.beginPath();
        const p1 = scene.getPin(b.p1);
        const p2 = scene.getPin(b.p2);
        ctx.moveTo(p1[0], p1[1]);
        ctx.lineTo(p2[0], p2[1]);
        ctx.stroke();
    }
}
function TrussLayer(scene) {
    return Fill(scene).onDraw(trussLayerOnDraw);
}
// TODO: Take Scene as state instead of SceneJSON?
function drawTerrain(ctx, box, _ec, vp, state) {
    const terrain = state.terrain;
    const hmap = terrain.hmap;
    const pitch = state.width / (hmap.length - 1);
    const left = vp.left - box.left;
    const right = left + vp.width;
    const begin = Math.max(Math.min(Math.floor(left / pitch), hmap.length - 1), 0);
    const end = Math.max(Math.min(Math.ceil(right / pitch), hmap.length - 1), 0);
    ctx.fillStyle = terrain.style;
    ctx.beginPath();
    ctx.moveTo(box.left, box.top + box.height);
    for (let i = begin; i <= end; i++) {
        ctx.lineTo(box.left + i * pitch, box.top + hmap[i]);
    }
    ctx.lineTo(box.left + box.width, box.top + box.height);
    ctx.closePath();
    ctx.fill();
}
export function SceneElement(sceneJSON) {
    const scene = new Scene(sceneJSON);
    return Box(sceneJSON.width, sceneJSON.height, Layer(Fill(sceneJSON).onDraw(drawTerrain), TrussLayer(scene), AddTrussLayer(scene)));
}
//# sourceMappingURL=data:application/json;base64,